// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sooler.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Sooler_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Sooler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Sooler_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Sooler_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Sooler_2eproto;
class FileDownload;
struct FileDownloadDefaultTypeInternal;
extern FileDownloadDefaultTypeInternal _FileDownload_default_instance_;
class FileDownloadRequest;
struct FileDownloadRequestDefaultTypeInternal;
extern FileDownloadRequestDefaultTypeInternal _FileDownloadRequest_default_instance_;
class FileDownloadRequestResponse;
struct FileDownloadRequestResponseDefaultTypeInternal;
extern FileDownloadRequestResponseDefaultTypeInternal _FileDownloadRequestResponse_default_instance_;
class FileDownloadResponse;
struct FileDownloadResponseDefaultTypeInternal;
extern FileDownloadResponseDefaultTypeInternal _FileDownloadResponse_default_instance_;
class FileUpload;
struct FileUploadDefaultTypeInternal;
extern FileUploadDefaultTypeInternal _FileUpload_default_instance_;
class FileUploadCheck;
struct FileUploadCheckDefaultTypeInternal;
extern FileUploadCheckDefaultTypeInternal _FileUploadCheck_default_instance_;
class FileUploadCheckResponse;
struct FileUploadCheckResponseDefaultTypeInternal;
extern FileUploadCheckResponseDefaultTypeInternal _FileUploadCheckResponse_default_instance_;
class FileUploadRequest;
struct FileUploadRequestDefaultTypeInternal;
extern FileUploadRequestDefaultTypeInternal _FileUploadRequest_default_instance_;
class FileUploadRequestResponse;
struct FileUploadRequestResponseDefaultTypeInternal;
extern FileUploadRequestResponseDefaultTypeInternal _FileUploadRequestResponse_default_instance_;
class FileUploadResponse;
struct FileUploadResponseDefaultTypeInternal;
extern FileUploadResponseDefaultTypeInternal _FileUploadResponse_default_instance_;
class Login;
struct LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class ProtoBufMessage;
struct ProtoBufMessageDefaultTypeInternal;
extern ProtoBufMessageDefaultTypeInternal _ProtoBufMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FileDownload* Arena::CreateMaybeMessage<::FileDownload>(Arena*);
template<> ::FileDownloadRequest* Arena::CreateMaybeMessage<::FileDownloadRequest>(Arena*);
template<> ::FileDownloadRequestResponse* Arena::CreateMaybeMessage<::FileDownloadRequestResponse>(Arena*);
template<> ::FileDownloadResponse* Arena::CreateMaybeMessage<::FileDownloadResponse>(Arena*);
template<> ::FileUpload* Arena::CreateMaybeMessage<::FileUpload>(Arena*);
template<> ::FileUploadCheck* Arena::CreateMaybeMessage<::FileUploadCheck>(Arena*);
template<> ::FileUploadCheckResponse* Arena::CreateMaybeMessage<::FileUploadCheckResponse>(Arena*);
template<> ::FileUploadRequest* Arena::CreateMaybeMessage<::FileUploadRequest>(Arena*);
template<> ::FileUploadRequestResponse* Arena::CreateMaybeMessage<::FileUploadRequestResponse>(Arena*);
template<> ::FileUploadResponse* Arena::CreateMaybeMessage<::FileUploadResponse>(Arena*);
template<> ::Login* Arena::CreateMaybeMessage<::Login>(Arena*);
template<> ::LoginResponse* Arena::CreateMaybeMessage<::LoginResponse>(Arena*);
template<> ::ProtoBufMessage* Arena::CreateMaybeMessage<::ProtoBufMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum COMMAND : int {
  UNKNOW = 0,
  LOGIN = 1,
  LOGINRESPONSE = 2,
  FILEUPLOADREQUEST = 3,
  FILEUPLOADREQUESTRESPONSE = 4,
  FILEUPLOAD = 5,
  FILEUPLOADRESPONSE = 6,
  FILEUPLOADCHECK = 7,
  FILEUPLOADCHECKRESPONSE = 8,
  FILEDOWNLOADREQUEST = 9,
  FILEDOWNLOADREQUESTRESPONSE = 10,
  FILEDOWNLOAD = 11,
  FILEDOWNLOADRESPONSE = 12,
  FILEDOWNLOADCHECK = 13,
  FILEDOWNLOADCHECKRESPONSE = 14,
  COMMAND_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  COMMAND_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool COMMAND_IsValid(int value);
constexpr COMMAND COMMAND_MIN = UNKNOW;
constexpr COMMAND COMMAND_MAX = FILEDOWNLOADCHECKRESPONSE;
constexpr int COMMAND_ARRAYSIZE = COMMAND_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* COMMAND_descriptor();
template<typename T>
inline const std::string& COMMAND_Name(T enum_t_value) {
  static_assert(::std::is_same<T, COMMAND>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function COMMAND_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    COMMAND_descriptor(), enum_t_value);
}
inline bool COMMAND_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, COMMAND* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<COMMAND>(
    COMMAND_descriptor(), name, value);
}
enum STATUSCODE : int {
  FAIL = 0,
  SUCCESS = 1,
  ERRORCODE = 2,
  STATUSCODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  STATUSCODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool STATUSCODE_IsValid(int value);
constexpr STATUSCODE STATUSCODE_MIN = FAIL;
constexpr STATUSCODE STATUSCODE_MAX = ERRORCODE;
constexpr int STATUSCODE_ARRAYSIZE = STATUSCODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STATUSCODE_descriptor();
template<typename T>
inline const std::string& STATUSCODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, STATUSCODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function STATUSCODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    STATUSCODE_descriptor(), enum_t_value);
}
inline bool STATUSCODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, STATUSCODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<STATUSCODE>(
    STATUSCODE_descriptor(), name, value);
}
// ===================================================================

class ProtoBufMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoBufMessage) */ {
 public:
  inline ProtoBufMessage() : ProtoBufMessage(nullptr) {}
  ~ProtoBufMessage() override;
  explicit constexpr ProtoBufMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoBufMessage(const ProtoBufMessage& from);
  ProtoBufMessage(ProtoBufMessage&& from) noexcept
    : ProtoBufMessage() {
    *this = ::std::move(from);
  }

  inline ProtoBufMessage& operator=(const ProtoBufMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoBufMessage& operator=(ProtoBufMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoBufMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoBufMessage* internal_default_instance() {
    return reinterpret_cast<const ProtoBufMessage*>(
               &_ProtoBufMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoBufMessage& a, ProtoBufMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoBufMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoBufMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoBufMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoBufMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtoBufMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtoBufMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoBufMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoBufMessage";
  }
  protected:
  explicit ProtoBufMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 2,
    kLoginResponseFieldNumber = 3,
    kFileUploadRequestFieldNumber = 4,
    kFileUploadRequestResponseFieldNumber = 5,
    kFileUploadFieldNumber = 6,
    kFileUploadResponseFieldNumber = 7,
    kFileUploadCheckFieldNumber = 8,
    kFileUploadCheckResponseFieldNumber = 9,
    kFileDownloadRequestFieldNumber = 10,
    kFileDownloadRequestResponseFieldNumber = 11,
    kFileDownloadFieldNumber = 12,
    kFileDownloadResponseFieldNumber = 13,
    kCmdFieldNumber = 1,
  };
  // .Login login = 2;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const ::Login& login() const;
  PROTOBUF_NODISCARD ::Login* release_login();
  ::Login* mutable_login();
  void set_allocated_login(::Login* login);
  private:
  const ::Login& _internal_login() const;
  ::Login* _internal_mutable_login();
  public:
  void unsafe_arena_set_allocated_login(
      ::Login* login);
  ::Login* unsafe_arena_release_login();

  // .LoginResponse loginResponse = 3;
  bool has_loginresponse() const;
  private:
  bool _internal_has_loginresponse() const;
  public:
  void clear_loginresponse();
  const ::LoginResponse& loginresponse() const;
  PROTOBUF_NODISCARD ::LoginResponse* release_loginresponse();
  ::LoginResponse* mutable_loginresponse();
  void set_allocated_loginresponse(::LoginResponse* loginresponse);
  private:
  const ::LoginResponse& _internal_loginresponse() const;
  ::LoginResponse* _internal_mutable_loginresponse();
  public:
  void unsafe_arena_set_allocated_loginresponse(
      ::LoginResponse* loginresponse);
  ::LoginResponse* unsafe_arena_release_loginresponse();

  // .FileUploadRequest fileUploadRequest = 4;
  bool has_fileuploadrequest() const;
  private:
  bool _internal_has_fileuploadrequest() const;
  public:
  void clear_fileuploadrequest();
  const ::FileUploadRequest& fileuploadrequest() const;
  PROTOBUF_NODISCARD ::FileUploadRequest* release_fileuploadrequest();
  ::FileUploadRequest* mutable_fileuploadrequest();
  void set_allocated_fileuploadrequest(::FileUploadRequest* fileuploadrequest);
  private:
  const ::FileUploadRequest& _internal_fileuploadrequest() const;
  ::FileUploadRequest* _internal_mutable_fileuploadrequest();
  public:
  void unsafe_arena_set_allocated_fileuploadrequest(
      ::FileUploadRequest* fileuploadrequest);
  ::FileUploadRequest* unsafe_arena_release_fileuploadrequest();

  // .FileUploadRequestResponse fileUploadRequestResponse = 5;
  bool has_fileuploadrequestresponse() const;
  private:
  bool _internal_has_fileuploadrequestresponse() const;
  public:
  void clear_fileuploadrequestresponse();
  const ::FileUploadRequestResponse& fileuploadrequestresponse() const;
  PROTOBUF_NODISCARD ::FileUploadRequestResponse* release_fileuploadrequestresponse();
  ::FileUploadRequestResponse* mutable_fileuploadrequestresponse();
  void set_allocated_fileuploadrequestresponse(::FileUploadRequestResponse* fileuploadrequestresponse);
  private:
  const ::FileUploadRequestResponse& _internal_fileuploadrequestresponse() const;
  ::FileUploadRequestResponse* _internal_mutable_fileuploadrequestresponse();
  public:
  void unsafe_arena_set_allocated_fileuploadrequestresponse(
      ::FileUploadRequestResponse* fileuploadrequestresponse);
  ::FileUploadRequestResponse* unsafe_arena_release_fileuploadrequestresponse();

  // .FileUpload fileUpload = 6;
  bool has_fileupload() const;
  private:
  bool _internal_has_fileupload() const;
  public:
  void clear_fileupload();
  const ::FileUpload& fileupload() const;
  PROTOBUF_NODISCARD ::FileUpload* release_fileupload();
  ::FileUpload* mutable_fileupload();
  void set_allocated_fileupload(::FileUpload* fileupload);
  private:
  const ::FileUpload& _internal_fileupload() const;
  ::FileUpload* _internal_mutable_fileupload();
  public:
  void unsafe_arena_set_allocated_fileupload(
      ::FileUpload* fileupload);
  ::FileUpload* unsafe_arena_release_fileupload();

  // .FileUploadResponse fileUploadResponse = 7;
  bool has_fileuploadresponse() const;
  private:
  bool _internal_has_fileuploadresponse() const;
  public:
  void clear_fileuploadresponse();
  const ::FileUploadResponse& fileuploadresponse() const;
  PROTOBUF_NODISCARD ::FileUploadResponse* release_fileuploadresponse();
  ::FileUploadResponse* mutable_fileuploadresponse();
  void set_allocated_fileuploadresponse(::FileUploadResponse* fileuploadresponse);
  private:
  const ::FileUploadResponse& _internal_fileuploadresponse() const;
  ::FileUploadResponse* _internal_mutable_fileuploadresponse();
  public:
  void unsafe_arena_set_allocated_fileuploadresponse(
      ::FileUploadResponse* fileuploadresponse);
  ::FileUploadResponse* unsafe_arena_release_fileuploadresponse();

  // .FileUploadCheck fileUploadCheck = 8;
  bool has_fileuploadcheck() const;
  private:
  bool _internal_has_fileuploadcheck() const;
  public:
  void clear_fileuploadcheck();
  const ::FileUploadCheck& fileuploadcheck() const;
  PROTOBUF_NODISCARD ::FileUploadCheck* release_fileuploadcheck();
  ::FileUploadCheck* mutable_fileuploadcheck();
  void set_allocated_fileuploadcheck(::FileUploadCheck* fileuploadcheck);
  private:
  const ::FileUploadCheck& _internal_fileuploadcheck() const;
  ::FileUploadCheck* _internal_mutable_fileuploadcheck();
  public:
  void unsafe_arena_set_allocated_fileuploadcheck(
      ::FileUploadCheck* fileuploadcheck);
  ::FileUploadCheck* unsafe_arena_release_fileuploadcheck();

  // .FileUploadCheckResponse fileUploadCheckResponse = 9;
  bool has_fileuploadcheckresponse() const;
  private:
  bool _internal_has_fileuploadcheckresponse() const;
  public:
  void clear_fileuploadcheckresponse();
  const ::FileUploadCheckResponse& fileuploadcheckresponse() const;
  PROTOBUF_NODISCARD ::FileUploadCheckResponse* release_fileuploadcheckresponse();
  ::FileUploadCheckResponse* mutable_fileuploadcheckresponse();
  void set_allocated_fileuploadcheckresponse(::FileUploadCheckResponse* fileuploadcheckresponse);
  private:
  const ::FileUploadCheckResponse& _internal_fileuploadcheckresponse() const;
  ::FileUploadCheckResponse* _internal_mutable_fileuploadcheckresponse();
  public:
  void unsafe_arena_set_allocated_fileuploadcheckresponse(
      ::FileUploadCheckResponse* fileuploadcheckresponse);
  ::FileUploadCheckResponse* unsafe_arena_release_fileuploadcheckresponse();

  // .FileDownloadRequest fileDownloadRequest = 10;
  bool has_filedownloadrequest() const;
  private:
  bool _internal_has_filedownloadrequest() const;
  public:
  void clear_filedownloadrequest();
  const ::FileDownloadRequest& filedownloadrequest() const;
  PROTOBUF_NODISCARD ::FileDownloadRequest* release_filedownloadrequest();
  ::FileDownloadRequest* mutable_filedownloadrequest();
  void set_allocated_filedownloadrequest(::FileDownloadRequest* filedownloadrequest);
  private:
  const ::FileDownloadRequest& _internal_filedownloadrequest() const;
  ::FileDownloadRequest* _internal_mutable_filedownloadrequest();
  public:
  void unsafe_arena_set_allocated_filedownloadrequest(
      ::FileDownloadRequest* filedownloadrequest);
  ::FileDownloadRequest* unsafe_arena_release_filedownloadrequest();

  // .FileDownloadRequestResponse fileDownloadRequestResponse = 11;
  bool has_filedownloadrequestresponse() const;
  private:
  bool _internal_has_filedownloadrequestresponse() const;
  public:
  void clear_filedownloadrequestresponse();
  const ::FileDownloadRequestResponse& filedownloadrequestresponse() const;
  PROTOBUF_NODISCARD ::FileDownloadRequestResponse* release_filedownloadrequestresponse();
  ::FileDownloadRequestResponse* mutable_filedownloadrequestresponse();
  void set_allocated_filedownloadrequestresponse(::FileDownloadRequestResponse* filedownloadrequestresponse);
  private:
  const ::FileDownloadRequestResponse& _internal_filedownloadrequestresponse() const;
  ::FileDownloadRequestResponse* _internal_mutable_filedownloadrequestresponse();
  public:
  void unsafe_arena_set_allocated_filedownloadrequestresponse(
      ::FileDownloadRequestResponse* filedownloadrequestresponse);
  ::FileDownloadRequestResponse* unsafe_arena_release_filedownloadrequestresponse();

  // .FileDownload fileDownload = 12;
  bool has_filedownload() const;
  private:
  bool _internal_has_filedownload() const;
  public:
  void clear_filedownload();
  const ::FileDownload& filedownload() const;
  PROTOBUF_NODISCARD ::FileDownload* release_filedownload();
  ::FileDownload* mutable_filedownload();
  void set_allocated_filedownload(::FileDownload* filedownload);
  private:
  const ::FileDownload& _internal_filedownload() const;
  ::FileDownload* _internal_mutable_filedownload();
  public:
  void unsafe_arena_set_allocated_filedownload(
      ::FileDownload* filedownload);
  ::FileDownload* unsafe_arena_release_filedownload();

  // .FileDownloadResponse fileDownloadResponse = 13;
  bool has_filedownloadresponse() const;
  private:
  bool _internal_has_filedownloadresponse() const;
  public:
  void clear_filedownloadresponse();
  const ::FileDownloadResponse& filedownloadresponse() const;
  PROTOBUF_NODISCARD ::FileDownloadResponse* release_filedownloadresponse();
  ::FileDownloadResponse* mutable_filedownloadresponse();
  void set_allocated_filedownloadresponse(::FileDownloadResponse* filedownloadresponse);
  private:
  const ::FileDownloadResponse& _internal_filedownloadresponse() const;
  ::FileDownloadResponse* _internal_mutable_filedownloadresponse();
  public:
  void unsafe_arena_set_allocated_filedownloadresponse(
      ::FileDownloadResponse* filedownloadresponse);
  ::FileDownloadResponse* unsafe_arena_release_filedownloadresponse();

  // sint32 cmd = 1;
  void clear_cmd();
  int32_t cmd() const;
  void set_cmd(int32_t value);
  private:
  int32_t _internal_cmd() const;
  void _internal_set_cmd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoBufMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Login* login_;
  ::LoginResponse* loginresponse_;
  ::FileUploadRequest* fileuploadrequest_;
  ::FileUploadRequestResponse* fileuploadrequestresponse_;
  ::FileUpload* fileupload_;
  ::FileUploadResponse* fileuploadresponse_;
  ::FileUploadCheck* fileuploadcheck_;
  ::FileUploadCheckResponse* fileuploadcheckresponse_;
  ::FileDownloadRequest* filedownloadrequest_;
  ::FileDownloadRequestResponse* filedownloadrequestresponse_;
  ::FileDownload* filedownload_;
  ::FileDownloadResponse* filedownloadresponse_;
  int32_t cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// -------------------------------------------------------------------

class Login final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login) */ {
 public:
  inline Login() : Login(nullptr) {}
  ~Login() override;
  explicit constexpr Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login(const Login& from);
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login& operator=(Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }
  inline void Swap(Login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Login& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login";
  }
  protected:
  explicit Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPwdFieldNumber = 2,
    kDatetimeFieldNumber = 3,
  };
  // bytes username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // uint64 datetime = 3;
  void clear_datetime();
  uint64_t datetime() const;
  void set_datetime(uint64_t value);
  private:
  uint64_t _internal_datetime() const;
  void _internal_set_datetime(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  uint64_t datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() override;
  explicit constexpr LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kUidFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // bytes description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint64 uid = 3;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  uint64_t uid_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// -------------------------------------------------------------------

class FileUploadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileUploadRequest) */ {
 public:
  inline FileUploadRequest() : FileUploadRequest(nullptr) {}
  ~FileUploadRequest() override;
  explicit constexpr FileUploadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileUploadRequest(const FileUploadRequest& from);
  FileUploadRequest(FileUploadRequest&& from) noexcept
    : FileUploadRequest() {
    *this = ::std::move(from);
  }

  inline FileUploadRequest& operator=(const FileUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUploadRequest& operator=(FileUploadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileUploadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileUploadRequest* internal_default_instance() {
    return reinterpret_cast<const FileUploadRequest*>(
               &_FileUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileUploadRequest& a, FileUploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUploadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileUploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileUploadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileUploadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileUploadRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUploadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileUploadRequest";
  }
  protected:
  explicit FileUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginpathFieldNumber = 2,
    kFilenameFieldNumber = 3,
    kTargetpathFieldNumber = 4,
    kUidFieldNumber = 1,
    kFilesizeFieldNumber = 5,
  };
  // bytes originpath = 2;
  void clear_originpath();
  const std::string& originpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_originpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_originpath();
  PROTOBUF_NODISCARD std::string* release_originpath();
  void set_allocated_originpath(std::string* originpath);
  private:
  const std::string& _internal_originpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originpath(const std::string& value);
  std::string* _internal_mutable_originpath();
  public:

  // bytes filename = 3;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes targetpath = 4;
  void clear_targetpath();
  const std::string& targetpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetpath();
  PROTOBUF_NODISCARD std::string* release_targetpath();
  void set_allocated_targetpath(std::string* targetpath);
  private:
  const std::string& _internal_targetpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetpath(const std::string& value);
  std::string* _internal_mutable_targetpath();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint64 filesize = 5;
  void clear_filesize();
  uint64_t filesize() const;
  void set_filesize(uint64_t value);
  private:
  uint64_t _internal_filesize() const;
  void _internal_set_filesize(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FileUploadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetpath_;
  uint64_t uid_;
  uint64_t filesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// -------------------------------------------------------------------

class FileUploadRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileUploadRequestResponse) */ {
 public:
  inline FileUploadRequestResponse() : FileUploadRequestResponse(nullptr) {}
  ~FileUploadRequestResponse() override;
  explicit constexpr FileUploadRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileUploadRequestResponse(const FileUploadRequestResponse& from);
  FileUploadRequestResponse(FileUploadRequestResponse&& from) noexcept
    : FileUploadRequestResponse() {
    *this = ::std::move(from);
  }

  inline FileUploadRequestResponse& operator=(const FileUploadRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUploadRequestResponse& operator=(FileUploadRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileUploadRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileUploadRequestResponse* internal_default_instance() {
    return reinterpret_cast<const FileUploadRequestResponse*>(
               &_FileUploadRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileUploadRequestResponse& a, FileUploadRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUploadRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUploadRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileUploadRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileUploadRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileUploadRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileUploadRequestResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUploadRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileUploadRequestResponse";
  }
  protected:
  explicit FileUploadRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 3,
    kOriginpathFieldNumber = 4,
    kTargetpathFieldNumber = 5,
    kUidFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // bytes description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bytes originpath = 4;
  void clear_originpath();
  const std::string& originpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_originpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_originpath();
  PROTOBUF_NODISCARD std::string* release_originpath();
  void set_allocated_originpath(std::string* originpath);
  private:
  const std::string& _internal_originpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originpath(const std::string& value);
  std::string* _internal_mutable_originpath();
  public:

  // bytes targetpath = 5;
  void clear_targetpath();
  const std::string& targetpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetpath();
  PROTOBUF_NODISCARD std::string* release_targetpath();
  void set_allocated_targetpath(std::string* targetpath);
  private:
  const std::string& _internal_targetpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetpath(const std::string& value);
  std::string* _internal_mutable_targetpath();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // int32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FileUploadRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetpath_;
  uint64_t uid_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// -------------------------------------------------------------------

class FileUpload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileUpload) */ {
 public:
  inline FileUpload() : FileUpload(nullptr) {}
  ~FileUpload() override;
  explicit constexpr FileUpload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileUpload(const FileUpload& from);
  FileUpload(FileUpload&& from) noexcept
    : FileUpload() {
    *this = ::std::move(from);
  }

  inline FileUpload& operator=(const FileUpload& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUpload& operator=(FileUpload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileUpload& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileUpload* internal_default_instance() {
    return reinterpret_cast<const FileUpload*>(
               &_FileUpload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FileUpload& a, FileUpload& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUpload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUpload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileUpload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileUpload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileUpload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileUpload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUpload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileUpload";
  }
  protected:
  explicit FileUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kDataFieldNumber = 4,
    kTargetpathFieldNumber = 6,
    kOriginpathFieldNumber = 7,
    kUidFieldNumber = 1,
    kIndexFieldNumber = 3,
    kSizeFieldNumber = 5,
  };
  // bytes filename = 2;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bytes targetpath = 6;
  void clear_targetpath();
  const std::string& targetpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetpath();
  PROTOBUF_NODISCARD std::string* release_targetpath();
  void set_allocated_targetpath(std::string* targetpath);
  private:
  const std::string& _internal_targetpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetpath(const std::string& value);
  std::string* _internal_mutable_targetpath();
  public:

  // bytes originpath = 7;
  void clear_originpath();
  const std::string& originpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_originpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_originpath();
  PROTOBUF_NODISCARD std::string* release_originpath();
  void set_allocated_originpath(std::string* originpath);
  private:
  const std::string& _internal_originpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originpath(const std::string& value);
  std::string* _internal_mutable_originpath();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint64 index = 3;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // uint64 size = 5;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FileUpload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originpath_;
  uint64_t uid_;
  uint64_t index_;
  uint64_t size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// -------------------------------------------------------------------

class FileUploadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileUploadResponse) */ {
 public:
  inline FileUploadResponse() : FileUploadResponse(nullptr) {}
  ~FileUploadResponse() override;
  explicit constexpr FileUploadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileUploadResponse(const FileUploadResponse& from);
  FileUploadResponse(FileUploadResponse&& from) noexcept
    : FileUploadResponse() {
    *this = ::std::move(from);
  }

  inline FileUploadResponse& operator=(const FileUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUploadResponse& operator=(FileUploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileUploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileUploadResponse* internal_default_instance() {
    return reinterpret_cast<const FileUploadResponse*>(
               &_FileUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FileUploadResponse& a, FileUploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUploadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileUploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileUploadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileUploadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileUploadResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUploadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileUploadResponse";
  }
  protected:
  explicit FileUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kDescriptionFieldNumber = 5,
    kTargetpathFieldNumber = 6,
    kOriginpathFieldNumber = 7,
    kUidFieldNumber = 1,
    kSizeFieldNumber = 3,
    kCodeFieldNumber = 4,
  };
  // bytes filename = 2;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes description = 5;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bytes targetpath = 6;
  void clear_targetpath();
  const std::string& targetpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetpath();
  PROTOBUF_NODISCARD std::string* release_targetpath();
  void set_allocated_targetpath(std::string* targetpath);
  private:
  const std::string& _internal_targetpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetpath(const std::string& value);
  std::string* _internal_mutable_targetpath();
  public:

  // bytes originpath = 7;
  void clear_originpath();
  const std::string& originpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_originpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_originpath();
  PROTOBUF_NODISCARD std::string* release_originpath();
  void set_allocated_originpath(std::string* originpath);
  private:
  const std::string& _internal_originpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originpath(const std::string& value);
  std::string* _internal_mutable_originpath();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint64 size = 3;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // int32 code = 4;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FileUploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originpath_;
  uint64_t uid_;
  uint64_t size_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// -------------------------------------------------------------------

class FileUploadCheck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileUploadCheck) */ {
 public:
  inline FileUploadCheck() : FileUploadCheck(nullptr) {}
  ~FileUploadCheck() override;
  explicit constexpr FileUploadCheck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileUploadCheck(const FileUploadCheck& from);
  FileUploadCheck(FileUploadCheck&& from) noexcept
    : FileUploadCheck() {
    *this = ::std::move(from);
  }

  inline FileUploadCheck& operator=(const FileUploadCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUploadCheck& operator=(FileUploadCheck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileUploadCheck& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileUploadCheck* internal_default_instance() {
    return reinterpret_cast<const FileUploadCheck*>(
               &_FileUploadCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FileUploadCheck& a, FileUploadCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUploadCheck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUploadCheck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileUploadCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileUploadCheck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileUploadCheck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileUploadCheck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUploadCheck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileUploadCheck";
  }
  protected:
  explicit FileUploadCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kTargetpathFieldNumber = 3,
    kMd5FieldNumber = 4,
    kUidFieldNumber = 1,
  };
  // bytes filename = 2;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes targetpath = 3;
  void clear_targetpath();
  const std::string& targetpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetpath();
  PROTOBUF_NODISCARD std::string* release_targetpath();
  void set_allocated_targetpath(std::string* targetpath);
  private:
  const std::string& _internal_targetpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetpath(const std::string& value);
  std::string* _internal_mutable_targetpath();
  public:

  // bytes md5 = 4;
  void clear_md5();
  const std::string& md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5();
  PROTOBUF_NODISCARD std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FileUploadCheck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  uint64_t uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// -------------------------------------------------------------------

class FileUploadCheckResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileUploadCheckResponse) */ {
 public:
  inline FileUploadCheckResponse() : FileUploadCheckResponse(nullptr) {}
  ~FileUploadCheckResponse() override;
  explicit constexpr FileUploadCheckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileUploadCheckResponse(const FileUploadCheckResponse& from);
  FileUploadCheckResponse(FileUploadCheckResponse&& from) noexcept
    : FileUploadCheckResponse() {
    *this = ::std::move(from);
  }

  inline FileUploadCheckResponse& operator=(const FileUploadCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUploadCheckResponse& operator=(FileUploadCheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileUploadCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileUploadCheckResponse* internal_default_instance() {
    return reinterpret_cast<const FileUploadCheckResponse*>(
               &_FileUploadCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FileUploadCheckResponse& a, FileUploadCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUploadCheckResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUploadCheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileUploadCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileUploadCheckResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileUploadCheckResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileUploadCheckResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUploadCheckResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileUploadCheckResponse";
  }
  protected:
  explicit FileUploadCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetpathFieldNumber = 2,
    kFilenameFieldNumber = 3,
    kDescriptionFieldNumber = 5,
    kUidFieldNumber = 1,
    kCodeFieldNumber = 4,
  };
  // bytes targetpath = 2;
  void clear_targetpath();
  const std::string& targetpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetpath();
  PROTOBUF_NODISCARD std::string* release_targetpath();
  void set_allocated_targetpath(std::string* targetpath);
  private:
  const std::string& _internal_targetpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetpath(const std::string& value);
  std::string* _internal_mutable_targetpath();
  public:

  // bytes filename = 3;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes description = 5;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // int32 code = 4;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FileUploadCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  uint64_t uid_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// -------------------------------------------------------------------

class FileDownloadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileDownloadRequest) */ {
 public:
  inline FileDownloadRequest() : FileDownloadRequest(nullptr) {}
  ~FileDownloadRequest() override;
  explicit constexpr FileDownloadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDownloadRequest(const FileDownloadRequest& from);
  FileDownloadRequest(FileDownloadRequest&& from) noexcept
    : FileDownloadRequest() {
    *this = ::std::move(from);
  }

  inline FileDownloadRequest& operator=(const FileDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDownloadRequest& operator=(FileDownloadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDownloadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const FileDownloadRequest*>(
               &_FileDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FileDownloadRequest& a, FileDownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDownloadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDownloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDownloadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDownloadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileDownloadRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDownloadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileDownloadRequest";
  }
  protected:
  explicit FileDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kTargetpathFieldNumber = 3,
    kUidFieldNumber = 1,
  };
  // bytes filename = 2;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes targetpath = 3;
  void clear_targetpath();
  const std::string& targetpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetpath();
  PROTOBUF_NODISCARD std::string* release_targetpath();
  void set_allocated_targetpath(std::string* targetpath);
  private:
  const std::string& _internal_targetpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetpath(const std::string& value);
  std::string* _internal_mutable_targetpath();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FileDownloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetpath_;
  uint64_t uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// -------------------------------------------------------------------

class FileDownloadRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileDownloadRequestResponse) */ {
 public:
  inline FileDownloadRequestResponse() : FileDownloadRequestResponse(nullptr) {}
  ~FileDownloadRequestResponse() override;
  explicit constexpr FileDownloadRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDownloadRequestResponse(const FileDownloadRequestResponse& from);
  FileDownloadRequestResponse(FileDownloadRequestResponse&& from) noexcept
    : FileDownloadRequestResponse() {
    *this = ::std::move(from);
  }

  inline FileDownloadRequestResponse& operator=(const FileDownloadRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDownloadRequestResponse& operator=(FileDownloadRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDownloadRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDownloadRequestResponse* internal_default_instance() {
    return reinterpret_cast<const FileDownloadRequestResponse*>(
               &_FileDownloadRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FileDownloadRequestResponse& a, FileDownloadRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDownloadRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDownloadRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDownloadRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDownloadRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDownloadRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileDownloadRequestResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDownloadRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileDownloadRequestResponse";
  }
  protected:
  explicit FileDownloadRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 3,
    kFilenameFieldNumber = 4,
    kTargetpathFieldNumber = 6,
    kUidFieldNumber = 1,
    kSizeFieldNumber = 5,
    kCodeFieldNumber = 2,
  };
  // bytes description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bytes filename = 4;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes targetpath = 6;
  void clear_targetpath();
  const std::string& targetpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetpath();
  PROTOBUF_NODISCARD std::string* release_targetpath();
  void set_allocated_targetpath(std::string* targetpath);
  private:
  const std::string& _internal_targetpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetpath(const std::string& value);
  std::string* _internal_mutable_targetpath();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint64 size = 5;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // int32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FileDownloadRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetpath_;
  uint64_t uid_;
  uint64_t size_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// -------------------------------------------------------------------

class FileDownload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileDownload) */ {
 public:
  inline FileDownload() : FileDownload(nullptr) {}
  ~FileDownload() override;
  explicit constexpr FileDownload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDownload(const FileDownload& from);
  FileDownload(FileDownload&& from) noexcept
    : FileDownload() {
    *this = ::std::move(from);
  }

  inline FileDownload& operator=(const FileDownload& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDownload& operator=(FileDownload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDownload& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDownload* internal_default_instance() {
    return reinterpret_cast<const FileDownload*>(
               &_FileDownload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FileDownload& a, FileDownload& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDownload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDownload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDownload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDownload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDownload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileDownload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDownload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileDownload";
  }
  protected:
  explicit FileDownload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kTargetpathFieldNumber = 3,
    kUidFieldNumber = 1,
  };
  // bytes filename = 2;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes targetpath = 3;
  void clear_targetpath();
  const std::string& targetpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetpath();
  PROTOBUF_NODISCARD std::string* release_targetpath();
  void set_allocated_targetpath(std::string* targetpath);
  private:
  const std::string& _internal_targetpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetpath(const std::string& value);
  std::string* _internal_mutable_targetpath();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FileDownload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetpath_;
  uint64_t uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// -------------------------------------------------------------------

class FileDownloadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileDownloadResponse) */ {
 public:
  inline FileDownloadResponse() : FileDownloadResponse(nullptr) {}
  ~FileDownloadResponse() override;
  explicit constexpr FileDownloadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDownloadResponse(const FileDownloadResponse& from);
  FileDownloadResponse(FileDownloadResponse&& from) noexcept
    : FileDownloadResponse() {
    *this = ::std::move(from);
  }

  inline FileDownloadResponse& operator=(const FileDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDownloadResponse& operator=(FileDownloadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDownloadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const FileDownloadResponse*>(
               &_FileDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FileDownloadResponse& a, FileDownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDownloadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDownloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDownloadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDownloadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileDownloadResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDownloadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileDownloadResponse";
  }
  protected:
  explicit FileDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 3,
    kFilenameFieldNumber = 4,
    kDataFieldNumber = 6,
    kUidFieldNumber = 1,
    kIndexFieldNumber = 5,
    kSizeFieldNumber = 7,
    kCodeFieldNumber = 2,
  };
  // bytes description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bytes filename = 4;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint64 index = 5;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // uint64 size = 7;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // int32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FileDownloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint64_t uid_;
  uint64_t index_;
  uint64_t size_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sooler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoBufMessage

// sint32 cmd = 1;
inline void ProtoBufMessage::clear_cmd() {
  cmd_ = 0;
}
inline int32_t ProtoBufMessage::_internal_cmd() const {
  return cmd_;
}
inline int32_t ProtoBufMessage::cmd() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.cmd)
  return _internal_cmd();
}
inline void ProtoBufMessage::_internal_set_cmd(int32_t value) {
  
  cmd_ = value;
}
inline void ProtoBufMessage::set_cmd(int32_t value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:ProtoBufMessage.cmd)
}

// .Login login = 2;
inline bool ProtoBufMessage::_internal_has_login() const {
  return this != internal_default_instance() && login_ != nullptr;
}
inline bool ProtoBufMessage::has_login() const {
  return _internal_has_login();
}
inline void ProtoBufMessage::clear_login() {
  if (GetArenaForAllocation() == nullptr && login_ != nullptr) {
    delete login_;
  }
  login_ = nullptr;
}
inline const ::Login& ProtoBufMessage::_internal_login() const {
  const ::Login* p = login_;
  return p != nullptr ? *p : reinterpret_cast<const ::Login&>(
      ::_Login_default_instance_);
}
inline const ::Login& ProtoBufMessage::login() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.login)
  return _internal_login();
}
inline void ProtoBufMessage::unsafe_arena_set_allocated_login(
    ::Login* login) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_);
  }
  login_ = login;
  if (login) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoBufMessage.login)
}
inline ::Login* ProtoBufMessage::release_login() {
  
  ::Login* temp = login_;
  login_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Login* ProtoBufMessage::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_release:ProtoBufMessage.login)
  
  ::Login* temp = login_;
  login_ = nullptr;
  return temp;
}
inline ::Login* ProtoBufMessage::_internal_mutable_login() {
  
  if (login_ == nullptr) {
    auto* p = CreateMaybeMessage<::Login>(GetArenaForAllocation());
    login_ = p;
  }
  return login_;
}
inline ::Login* ProtoBufMessage::mutable_login() {
  ::Login* _msg = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:ProtoBufMessage.login)
  return _msg;
}
inline void ProtoBufMessage::set_allocated_login(::Login* login) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete login_;
  }
  if (login) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Login>::GetOwningArena(login);
    if (message_arena != submessage_arena) {
      login = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    
  } else {
    
  }
  login_ = login;
  // @@protoc_insertion_point(field_set_allocated:ProtoBufMessage.login)
}

// .LoginResponse loginResponse = 3;
inline bool ProtoBufMessage::_internal_has_loginresponse() const {
  return this != internal_default_instance() && loginresponse_ != nullptr;
}
inline bool ProtoBufMessage::has_loginresponse() const {
  return _internal_has_loginresponse();
}
inline void ProtoBufMessage::clear_loginresponse() {
  if (GetArenaForAllocation() == nullptr && loginresponse_ != nullptr) {
    delete loginresponse_;
  }
  loginresponse_ = nullptr;
}
inline const ::LoginResponse& ProtoBufMessage::_internal_loginresponse() const {
  const ::LoginResponse* p = loginresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::LoginResponse&>(
      ::_LoginResponse_default_instance_);
}
inline const ::LoginResponse& ProtoBufMessage::loginresponse() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.loginResponse)
  return _internal_loginresponse();
}
inline void ProtoBufMessage::unsafe_arena_set_allocated_loginresponse(
    ::LoginResponse* loginresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loginresponse_);
  }
  loginresponse_ = loginresponse;
  if (loginresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoBufMessage.loginResponse)
}
inline ::LoginResponse* ProtoBufMessage::release_loginresponse() {
  
  ::LoginResponse* temp = loginresponse_;
  loginresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LoginResponse* ProtoBufMessage::unsafe_arena_release_loginresponse() {
  // @@protoc_insertion_point(field_release:ProtoBufMessage.loginResponse)
  
  ::LoginResponse* temp = loginresponse_;
  loginresponse_ = nullptr;
  return temp;
}
inline ::LoginResponse* ProtoBufMessage::_internal_mutable_loginresponse() {
  
  if (loginresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::LoginResponse>(GetArenaForAllocation());
    loginresponse_ = p;
  }
  return loginresponse_;
}
inline ::LoginResponse* ProtoBufMessage::mutable_loginresponse() {
  ::LoginResponse* _msg = _internal_mutable_loginresponse();
  // @@protoc_insertion_point(field_mutable:ProtoBufMessage.loginResponse)
  return _msg;
}
inline void ProtoBufMessage::set_allocated_loginresponse(::LoginResponse* loginresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete loginresponse_;
  }
  if (loginresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::LoginResponse>::GetOwningArena(loginresponse);
    if (message_arena != submessage_arena) {
      loginresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginresponse, submessage_arena);
    }
    
  } else {
    
  }
  loginresponse_ = loginresponse;
  // @@protoc_insertion_point(field_set_allocated:ProtoBufMessage.loginResponse)
}

// .FileUploadRequest fileUploadRequest = 4;
inline bool ProtoBufMessage::_internal_has_fileuploadrequest() const {
  return this != internal_default_instance() && fileuploadrequest_ != nullptr;
}
inline bool ProtoBufMessage::has_fileuploadrequest() const {
  return _internal_has_fileuploadrequest();
}
inline void ProtoBufMessage::clear_fileuploadrequest() {
  if (GetArenaForAllocation() == nullptr && fileuploadrequest_ != nullptr) {
    delete fileuploadrequest_;
  }
  fileuploadrequest_ = nullptr;
}
inline const ::FileUploadRequest& ProtoBufMessage::_internal_fileuploadrequest() const {
  const ::FileUploadRequest* p = fileuploadrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::FileUploadRequest&>(
      ::_FileUploadRequest_default_instance_);
}
inline const ::FileUploadRequest& ProtoBufMessage::fileuploadrequest() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.fileUploadRequest)
  return _internal_fileuploadrequest();
}
inline void ProtoBufMessage::unsafe_arena_set_allocated_fileuploadrequest(
    ::FileUploadRequest* fileuploadrequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileuploadrequest_);
  }
  fileuploadrequest_ = fileuploadrequest;
  if (fileuploadrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoBufMessage.fileUploadRequest)
}
inline ::FileUploadRequest* ProtoBufMessage::release_fileuploadrequest() {
  
  ::FileUploadRequest* temp = fileuploadrequest_;
  fileuploadrequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FileUploadRequest* ProtoBufMessage::unsafe_arena_release_fileuploadrequest() {
  // @@protoc_insertion_point(field_release:ProtoBufMessage.fileUploadRequest)
  
  ::FileUploadRequest* temp = fileuploadrequest_;
  fileuploadrequest_ = nullptr;
  return temp;
}
inline ::FileUploadRequest* ProtoBufMessage::_internal_mutable_fileuploadrequest() {
  
  if (fileuploadrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::FileUploadRequest>(GetArenaForAllocation());
    fileuploadrequest_ = p;
  }
  return fileuploadrequest_;
}
inline ::FileUploadRequest* ProtoBufMessage::mutable_fileuploadrequest() {
  ::FileUploadRequest* _msg = _internal_mutable_fileuploadrequest();
  // @@protoc_insertion_point(field_mutable:ProtoBufMessage.fileUploadRequest)
  return _msg;
}
inline void ProtoBufMessage::set_allocated_fileuploadrequest(::FileUploadRequest* fileuploadrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fileuploadrequest_;
  }
  if (fileuploadrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FileUploadRequest>::GetOwningArena(fileuploadrequest);
    if (message_arena != submessage_arena) {
      fileuploadrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileuploadrequest, submessage_arena);
    }
    
  } else {
    
  }
  fileuploadrequest_ = fileuploadrequest;
  // @@protoc_insertion_point(field_set_allocated:ProtoBufMessage.fileUploadRequest)
}

// .FileUploadRequestResponse fileUploadRequestResponse = 5;
inline bool ProtoBufMessage::_internal_has_fileuploadrequestresponse() const {
  return this != internal_default_instance() && fileuploadrequestresponse_ != nullptr;
}
inline bool ProtoBufMessage::has_fileuploadrequestresponse() const {
  return _internal_has_fileuploadrequestresponse();
}
inline void ProtoBufMessage::clear_fileuploadrequestresponse() {
  if (GetArenaForAllocation() == nullptr && fileuploadrequestresponse_ != nullptr) {
    delete fileuploadrequestresponse_;
  }
  fileuploadrequestresponse_ = nullptr;
}
inline const ::FileUploadRequestResponse& ProtoBufMessage::_internal_fileuploadrequestresponse() const {
  const ::FileUploadRequestResponse* p = fileuploadrequestresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::FileUploadRequestResponse&>(
      ::_FileUploadRequestResponse_default_instance_);
}
inline const ::FileUploadRequestResponse& ProtoBufMessage::fileuploadrequestresponse() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.fileUploadRequestResponse)
  return _internal_fileuploadrequestresponse();
}
inline void ProtoBufMessage::unsafe_arena_set_allocated_fileuploadrequestresponse(
    ::FileUploadRequestResponse* fileuploadrequestresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileuploadrequestresponse_);
  }
  fileuploadrequestresponse_ = fileuploadrequestresponse;
  if (fileuploadrequestresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoBufMessage.fileUploadRequestResponse)
}
inline ::FileUploadRequestResponse* ProtoBufMessage::release_fileuploadrequestresponse() {
  
  ::FileUploadRequestResponse* temp = fileuploadrequestresponse_;
  fileuploadrequestresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FileUploadRequestResponse* ProtoBufMessage::unsafe_arena_release_fileuploadrequestresponse() {
  // @@protoc_insertion_point(field_release:ProtoBufMessage.fileUploadRequestResponse)
  
  ::FileUploadRequestResponse* temp = fileuploadrequestresponse_;
  fileuploadrequestresponse_ = nullptr;
  return temp;
}
inline ::FileUploadRequestResponse* ProtoBufMessage::_internal_mutable_fileuploadrequestresponse() {
  
  if (fileuploadrequestresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::FileUploadRequestResponse>(GetArenaForAllocation());
    fileuploadrequestresponse_ = p;
  }
  return fileuploadrequestresponse_;
}
inline ::FileUploadRequestResponse* ProtoBufMessage::mutable_fileuploadrequestresponse() {
  ::FileUploadRequestResponse* _msg = _internal_mutable_fileuploadrequestresponse();
  // @@protoc_insertion_point(field_mutable:ProtoBufMessage.fileUploadRequestResponse)
  return _msg;
}
inline void ProtoBufMessage::set_allocated_fileuploadrequestresponse(::FileUploadRequestResponse* fileuploadrequestresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fileuploadrequestresponse_;
  }
  if (fileuploadrequestresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FileUploadRequestResponse>::GetOwningArena(fileuploadrequestresponse);
    if (message_arena != submessage_arena) {
      fileuploadrequestresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileuploadrequestresponse, submessage_arena);
    }
    
  } else {
    
  }
  fileuploadrequestresponse_ = fileuploadrequestresponse;
  // @@protoc_insertion_point(field_set_allocated:ProtoBufMessage.fileUploadRequestResponse)
}

// .FileUpload fileUpload = 6;
inline bool ProtoBufMessage::_internal_has_fileupload() const {
  return this != internal_default_instance() && fileupload_ != nullptr;
}
inline bool ProtoBufMessage::has_fileupload() const {
  return _internal_has_fileupload();
}
inline void ProtoBufMessage::clear_fileupload() {
  if (GetArenaForAllocation() == nullptr && fileupload_ != nullptr) {
    delete fileupload_;
  }
  fileupload_ = nullptr;
}
inline const ::FileUpload& ProtoBufMessage::_internal_fileupload() const {
  const ::FileUpload* p = fileupload_;
  return p != nullptr ? *p : reinterpret_cast<const ::FileUpload&>(
      ::_FileUpload_default_instance_);
}
inline const ::FileUpload& ProtoBufMessage::fileupload() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.fileUpload)
  return _internal_fileupload();
}
inline void ProtoBufMessage::unsafe_arena_set_allocated_fileupload(
    ::FileUpload* fileupload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileupload_);
  }
  fileupload_ = fileupload;
  if (fileupload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoBufMessage.fileUpload)
}
inline ::FileUpload* ProtoBufMessage::release_fileupload() {
  
  ::FileUpload* temp = fileupload_;
  fileupload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FileUpload* ProtoBufMessage::unsafe_arena_release_fileupload() {
  // @@protoc_insertion_point(field_release:ProtoBufMessage.fileUpload)
  
  ::FileUpload* temp = fileupload_;
  fileupload_ = nullptr;
  return temp;
}
inline ::FileUpload* ProtoBufMessage::_internal_mutable_fileupload() {
  
  if (fileupload_ == nullptr) {
    auto* p = CreateMaybeMessage<::FileUpload>(GetArenaForAllocation());
    fileupload_ = p;
  }
  return fileupload_;
}
inline ::FileUpload* ProtoBufMessage::mutable_fileupload() {
  ::FileUpload* _msg = _internal_mutable_fileupload();
  // @@protoc_insertion_point(field_mutable:ProtoBufMessage.fileUpload)
  return _msg;
}
inline void ProtoBufMessage::set_allocated_fileupload(::FileUpload* fileupload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fileupload_;
  }
  if (fileupload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FileUpload>::GetOwningArena(fileupload);
    if (message_arena != submessage_arena) {
      fileupload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileupload, submessage_arena);
    }
    
  } else {
    
  }
  fileupload_ = fileupload;
  // @@protoc_insertion_point(field_set_allocated:ProtoBufMessage.fileUpload)
}

// .FileUploadResponse fileUploadResponse = 7;
inline bool ProtoBufMessage::_internal_has_fileuploadresponse() const {
  return this != internal_default_instance() && fileuploadresponse_ != nullptr;
}
inline bool ProtoBufMessage::has_fileuploadresponse() const {
  return _internal_has_fileuploadresponse();
}
inline void ProtoBufMessage::clear_fileuploadresponse() {
  if (GetArenaForAllocation() == nullptr && fileuploadresponse_ != nullptr) {
    delete fileuploadresponse_;
  }
  fileuploadresponse_ = nullptr;
}
inline const ::FileUploadResponse& ProtoBufMessage::_internal_fileuploadresponse() const {
  const ::FileUploadResponse* p = fileuploadresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::FileUploadResponse&>(
      ::_FileUploadResponse_default_instance_);
}
inline const ::FileUploadResponse& ProtoBufMessage::fileuploadresponse() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.fileUploadResponse)
  return _internal_fileuploadresponse();
}
inline void ProtoBufMessage::unsafe_arena_set_allocated_fileuploadresponse(
    ::FileUploadResponse* fileuploadresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileuploadresponse_);
  }
  fileuploadresponse_ = fileuploadresponse;
  if (fileuploadresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoBufMessage.fileUploadResponse)
}
inline ::FileUploadResponse* ProtoBufMessage::release_fileuploadresponse() {
  
  ::FileUploadResponse* temp = fileuploadresponse_;
  fileuploadresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FileUploadResponse* ProtoBufMessage::unsafe_arena_release_fileuploadresponse() {
  // @@protoc_insertion_point(field_release:ProtoBufMessage.fileUploadResponse)
  
  ::FileUploadResponse* temp = fileuploadresponse_;
  fileuploadresponse_ = nullptr;
  return temp;
}
inline ::FileUploadResponse* ProtoBufMessage::_internal_mutable_fileuploadresponse() {
  
  if (fileuploadresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::FileUploadResponse>(GetArenaForAllocation());
    fileuploadresponse_ = p;
  }
  return fileuploadresponse_;
}
inline ::FileUploadResponse* ProtoBufMessage::mutable_fileuploadresponse() {
  ::FileUploadResponse* _msg = _internal_mutable_fileuploadresponse();
  // @@protoc_insertion_point(field_mutable:ProtoBufMessage.fileUploadResponse)
  return _msg;
}
inline void ProtoBufMessage::set_allocated_fileuploadresponse(::FileUploadResponse* fileuploadresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fileuploadresponse_;
  }
  if (fileuploadresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FileUploadResponse>::GetOwningArena(fileuploadresponse);
    if (message_arena != submessage_arena) {
      fileuploadresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileuploadresponse, submessage_arena);
    }
    
  } else {
    
  }
  fileuploadresponse_ = fileuploadresponse;
  // @@protoc_insertion_point(field_set_allocated:ProtoBufMessage.fileUploadResponse)
}

// .FileUploadCheck fileUploadCheck = 8;
inline bool ProtoBufMessage::_internal_has_fileuploadcheck() const {
  return this != internal_default_instance() && fileuploadcheck_ != nullptr;
}
inline bool ProtoBufMessage::has_fileuploadcheck() const {
  return _internal_has_fileuploadcheck();
}
inline void ProtoBufMessage::clear_fileuploadcheck() {
  if (GetArenaForAllocation() == nullptr && fileuploadcheck_ != nullptr) {
    delete fileuploadcheck_;
  }
  fileuploadcheck_ = nullptr;
}
inline const ::FileUploadCheck& ProtoBufMessage::_internal_fileuploadcheck() const {
  const ::FileUploadCheck* p = fileuploadcheck_;
  return p != nullptr ? *p : reinterpret_cast<const ::FileUploadCheck&>(
      ::_FileUploadCheck_default_instance_);
}
inline const ::FileUploadCheck& ProtoBufMessage::fileuploadcheck() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.fileUploadCheck)
  return _internal_fileuploadcheck();
}
inline void ProtoBufMessage::unsafe_arena_set_allocated_fileuploadcheck(
    ::FileUploadCheck* fileuploadcheck) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileuploadcheck_);
  }
  fileuploadcheck_ = fileuploadcheck;
  if (fileuploadcheck) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoBufMessage.fileUploadCheck)
}
inline ::FileUploadCheck* ProtoBufMessage::release_fileuploadcheck() {
  
  ::FileUploadCheck* temp = fileuploadcheck_;
  fileuploadcheck_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FileUploadCheck* ProtoBufMessage::unsafe_arena_release_fileuploadcheck() {
  // @@protoc_insertion_point(field_release:ProtoBufMessage.fileUploadCheck)
  
  ::FileUploadCheck* temp = fileuploadcheck_;
  fileuploadcheck_ = nullptr;
  return temp;
}
inline ::FileUploadCheck* ProtoBufMessage::_internal_mutable_fileuploadcheck() {
  
  if (fileuploadcheck_ == nullptr) {
    auto* p = CreateMaybeMessage<::FileUploadCheck>(GetArenaForAllocation());
    fileuploadcheck_ = p;
  }
  return fileuploadcheck_;
}
inline ::FileUploadCheck* ProtoBufMessage::mutable_fileuploadcheck() {
  ::FileUploadCheck* _msg = _internal_mutable_fileuploadcheck();
  // @@protoc_insertion_point(field_mutable:ProtoBufMessage.fileUploadCheck)
  return _msg;
}
inline void ProtoBufMessage::set_allocated_fileuploadcheck(::FileUploadCheck* fileuploadcheck) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fileuploadcheck_;
  }
  if (fileuploadcheck) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FileUploadCheck>::GetOwningArena(fileuploadcheck);
    if (message_arena != submessage_arena) {
      fileuploadcheck = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileuploadcheck, submessage_arena);
    }
    
  } else {
    
  }
  fileuploadcheck_ = fileuploadcheck;
  // @@protoc_insertion_point(field_set_allocated:ProtoBufMessage.fileUploadCheck)
}

// .FileUploadCheckResponse fileUploadCheckResponse = 9;
inline bool ProtoBufMessage::_internal_has_fileuploadcheckresponse() const {
  return this != internal_default_instance() && fileuploadcheckresponse_ != nullptr;
}
inline bool ProtoBufMessage::has_fileuploadcheckresponse() const {
  return _internal_has_fileuploadcheckresponse();
}
inline void ProtoBufMessage::clear_fileuploadcheckresponse() {
  if (GetArenaForAllocation() == nullptr && fileuploadcheckresponse_ != nullptr) {
    delete fileuploadcheckresponse_;
  }
  fileuploadcheckresponse_ = nullptr;
}
inline const ::FileUploadCheckResponse& ProtoBufMessage::_internal_fileuploadcheckresponse() const {
  const ::FileUploadCheckResponse* p = fileuploadcheckresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::FileUploadCheckResponse&>(
      ::_FileUploadCheckResponse_default_instance_);
}
inline const ::FileUploadCheckResponse& ProtoBufMessage::fileuploadcheckresponse() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.fileUploadCheckResponse)
  return _internal_fileuploadcheckresponse();
}
inline void ProtoBufMessage::unsafe_arena_set_allocated_fileuploadcheckresponse(
    ::FileUploadCheckResponse* fileuploadcheckresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileuploadcheckresponse_);
  }
  fileuploadcheckresponse_ = fileuploadcheckresponse;
  if (fileuploadcheckresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoBufMessage.fileUploadCheckResponse)
}
inline ::FileUploadCheckResponse* ProtoBufMessage::release_fileuploadcheckresponse() {
  
  ::FileUploadCheckResponse* temp = fileuploadcheckresponse_;
  fileuploadcheckresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FileUploadCheckResponse* ProtoBufMessage::unsafe_arena_release_fileuploadcheckresponse() {
  // @@protoc_insertion_point(field_release:ProtoBufMessage.fileUploadCheckResponse)
  
  ::FileUploadCheckResponse* temp = fileuploadcheckresponse_;
  fileuploadcheckresponse_ = nullptr;
  return temp;
}
inline ::FileUploadCheckResponse* ProtoBufMessage::_internal_mutable_fileuploadcheckresponse() {
  
  if (fileuploadcheckresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::FileUploadCheckResponse>(GetArenaForAllocation());
    fileuploadcheckresponse_ = p;
  }
  return fileuploadcheckresponse_;
}
inline ::FileUploadCheckResponse* ProtoBufMessage::mutable_fileuploadcheckresponse() {
  ::FileUploadCheckResponse* _msg = _internal_mutable_fileuploadcheckresponse();
  // @@protoc_insertion_point(field_mutable:ProtoBufMessage.fileUploadCheckResponse)
  return _msg;
}
inline void ProtoBufMessage::set_allocated_fileuploadcheckresponse(::FileUploadCheckResponse* fileuploadcheckresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fileuploadcheckresponse_;
  }
  if (fileuploadcheckresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FileUploadCheckResponse>::GetOwningArena(fileuploadcheckresponse);
    if (message_arena != submessage_arena) {
      fileuploadcheckresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileuploadcheckresponse, submessage_arena);
    }
    
  } else {
    
  }
  fileuploadcheckresponse_ = fileuploadcheckresponse;
  // @@protoc_insertion_point(field_set_allocated:ProtoBufMessage.fileUploadCheckResponse)
}

// .FileDownloadRequest fileDownloadRequest = 10;
inline bool ProtoBufMessage::_internal_has_filedownloadrequest() const {
  return this != internal_default_instance() && filedownloadrequest_ != nullptr;
}
inline bool ProtoBufMessage::has_filedownloadrequest() const {
  return _internal_has_filedownloadrequest();
}
inline void ProtoBufMessage::clear_filedownloadrequest() {
  if (GetArenaForAllocation() == nullptr && filedownloadrequest_ != nullptr) {
    delete filedownloadrequest_;
  }
  filedownloadrequest_ = nullptr;
}
inline const ::FileDownloadRequest& ProtoBufMessage::_internal_filedownloadrequest() const {
  const ::FileDownloadRequest* p = filedownloadrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::FileDownloadRequest&>(
      ::_FileDownloadRequest_default_instance_);
}
inline const ::FileDownloadRequest& ProtoBufMessage::filedownloadrequest() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.fileDownloadRequest)
  return _internal_filedownloadrequest();
}
inline void ProtoBufMessage::unsafe_arena_set_allocated_filedownloadrequest(
    ::FileDownloadRequest* filedownloadrequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filedownloadrequest_);
  }
  filedownloadrequest_ = filedownloadrequest;
  if (filedownloadrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoBufMessage.fileDownloadRequest)
}
inline ::FileDownloadRequest* ProtoBufMessage::release_filedownloadrequest() {
  
  ::FileDownloadRequest* temp = filedownloadrequest_;
  filedownloadrequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FileDownloadRequest* ProtoBufMessage::unsafe_arena_release_filedownloadrequest() {
  // @@protoc_insertion_point(field_release:ProtoBufMessage.fileDownloadRequest)
  
  ::FileDownloadRequest* temp = filedownloadrequest_;
  filedownloadrequest_ = nullptr;
  return temp;
}
inline ::FileDownloadRequest* ProtoBufMessage::_internal_mutable_filedownloadrequest() {
  
  if (filedownloadrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::FileDownloadRequest>(GetArenaForAllocation());
    filedownloadrequest_ = p;
  }
  return filedownloadrequest_;
}
inline ::FileDownloadRequest* ProtoBufMessage::mutable_filedownloadrequest() {
  ::FileDownloadRequest* _msg = _internal_mutable_filedownloadrequest();
  // @@protoc_insertion_point(field_mutable:ProtoBufMessage.fileDownloadRequest)
  return _msg;
}
inline void ProtoBufMessage::set_allocated_filedownloadrequest(::FileDownloadRequest* filedownloadrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete filedownloadrequest_;
  }
  if (filedownloadrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FileDownloadRequest>::GetOwningArena(filedownloadrequest);
    if (message_arena != submessage_arena) {
      filedownloadrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filedownloadrequest, submessage_arena);
    }
    
  } else {
    
  }
  filedownloadrequest_ = filedownloadrequest;
  // @@protoc_insertion_point(field_set_allocated:ProtoBufMessage.fileDownloadRequest)
}

// .FileDownloadRequestResponse fileDownloadRequestResponse = 11;
inline bool ProtoBufMessage::_internal_has_filedownloadrequestresponse() const {
  return this != internal_default_instance() && filedownloadrequestresponse_ != nullptr;
}
inline bool ProtoBufMessage::has_filedownloadrequestresponse() const {
  return _internal_has_filedownloadrequestresponse();
}
inline void ProtoBufMessage::clear_filedownloadrequestresponse() {
  if (GetArenaForAllocation() == nullptr && filedownloadrequestresponse_ != nullptr) {
    delete filedownloadrequestresponse_;
  }
  filedownloadrequestresponse_ = nullptr;
}
inline const ::FileDownloadRequestResponse& ProtoBufMessage::_internal_filedownloadrequestresponse() const {
  const ::FileDownloadRequestResponse* p = filedownloadrequestresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::FileDownloadRequestResponse&>(
      ::_FileDownloadRequestResponse_default_instance_);
}
inline const ::FileDownloadRequestResponse& ProtoBufMessage::filedownloadrequestresponse() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.fileDownloadRequestResponse)
  return _internal_filedownloadrequestresponse();
}
inline void ProtoBufMessage::unsafe_arena_set_allocated_filedownloadrequestresponse(
    ::FileDownloadRequestResponse* filedownloadrequestresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filedownloadrequestresponse_);
  }
  filedownloadrequestresponse_ = filedownloadrequestresponse;
  if (filedownloadrequestresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoBufMessage.fileDownloadRequestResponse)
}
inline ::FileDownloadRequestResponse* ProtoBufMessage::release_filedownloadrequestresponse() {
  
  ::FileDownloadRequestResponse* temp = filedownloadrequestresponse_;
  filedownloadrequestresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FileDownloadRequestResponse* ProtoBufMessage::unsafe_arena_release_filedownloadrequestresponse() {
  // @@protoc_insertion_point(field_release:ProtoBufMessage.fileDownloadRequestResponse)
  
  ::FileDownloadRequestResponse* temp = filedownloadrequestresponse_;
  filedownloadrequestresponse_ = nullptr;
  return temp;
}
inline ::FileDownloadRequestResponse* ProtoBufMessage::_internal_mutable_filedownloadrequestresponse() {
  
  if (filedownloadrequestresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::FileDownloadRequestResponse>(GetArenaForAllocation());
    filedownloadrequestresponse_ = p;
  }
  return filedownloadrequestresponse_;
}
inline ::FileDownloadRequestResponse* ProtoBufMessage::mutable_filedownloadrequestresponse() {
  ::FileDownloadRequestResponse* _msg = _internal_mutable_filedownloadrequestresponse();
  // @@protoc_insertion_point(field_mutable:ProtoBufMessage.fileDownloadRequestResponse)
  return _msg;
}
inline void ProtoBufMessage::set_allocated_filedownloadrequestresponse(::FileDownloadRequestResponse* filedownloadrequestresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete filedownloadrequestresponse_;
  }
  if (filedownloadrequestresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FileDownloadRequestResponse>::GetOwningArena(filedownloadrequestresponse);
    if (message_arena != submessage_arena) {
      filedownloadrequestresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filedownloadrequestresponse, submessage_arena);
    }
    
  } else {
    
  }
  filedownloadrequestresponse_ = filedownloadrequestresponse;
  // @@protoc_insertion_point(field_set_allocated:ProtoBufMessage.fileDownloadRequestResponse)
}

// .FileDownload fileDownload = 12;
inline bool ProtoBufMessage::_internal_has_filedownload() const {
  return this != internal_default_instance() && filedownload_ != nullptr;
}
inline bool ProtoBufMessage::has_filedownload() const {
  return _internal_has_filedownload();
}
inline void ProtoBufMessage::clear_filedownload() {
  if (GetArenaForAllocation() == nullptr && filedownload_ != nullptr) {
    delete filedownload_;
  }
  filedownload_ = nullptr;
}
inline const ::FileDownload& ProtoBufMessage::_internal_filedownload() const {
  const ::FileDownload* p = filedownload_;
  return p != nullptr ? *p : reinterpret_cast<const ::FileDownload&>(
      ::_FileDownload_default_instance_);
}
inline const ::FileDownload& ProtoBufMessage::filedownload() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.fileDownload)
  return _internal_filedownload();
}
inline void ProtoBufMessage::unsafe_arena_set_allocated_filedownload(
    ::FileDownload* filedownload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filedownload_);
  }
  filedownload_ = filedownload;
  if (filedownload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoBufMessage.fileDownload)
}
inline ::FileDownload* ProtoBufMessage::release_filedownload() {
  
  ::FileDownload* temp = filedownload_;
  filedownload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FileDownload* ProtoBufMessage::unsafe_arena_release_filedownload() {
  // @@protoc_insertion_point(field_release:ProtoBufMessage.fileDownload)
  
  ::FileDownload* temp = filedownload_;
  filedownload_ = nullptr;
  return temp;
}
inline ::FileDownload* ProtoBufMessage::_internal_mutable_filedownload() {
  
  if (filedownload_ == nullptr) {
    auto* p = CreateMaybeMessage<::FileDownload>(GetArenaForAllocation());
    filedownload_ = p;
  }
  return filedownload_;
}
inline ::FileDownload* ProtoBufMessage::mutable_filedownload() {
  ::FileDownload* _msg = _internal_mutable_filedownload();
  // @@protoc_insertion_point(field_mutable:ProtoBufMessage.fileDownload)
  return _msg;
}
inline void ProtoBufMessage::set_allocated_filedownload(::FileDownload* filedownload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete filedownload_;
  }
  if (filedownload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FileDownload>::GetOwningArena(filedownload);
    if (message_arena != submessage_arena) {
      filedownload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filedownload, submessage_arena);
    }
    
  } else {
    
  }
  filedownload_ = filedownload;
  // @@protoc_insertion_point(field_set_allocated:ProtoBufMessage.fileDownload)
}

// .FileDownloadResponse fileDownloadResponse = 13;
inline bool ProtoBufMessage::_internal_has_filedownloadresponse() const {
  return this != internal_default_instance() && filedownloadresponse_ != nullptr;
}
inline bool ProtoBufMessage::has_filedownloadresponse() const {
  return _internal_has_filedownloadresponse();
}
inline void ProtoBufMessage::clear_filedownloadresponse() {
  if (GetArenaForAllocation() == nullptr && filedownloadresponse_ != nullptr) {
    delete filedownloadresponse_;
  }
  filedownloadresponse_ = nullptr;
}
inline const ::FileDownloadResponse& ProtoBufMessage::_internal_filedownloadresponse() const {
  const ::FileDownloadResponse* p = filedownloadresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::FileDownloadResponse&>(
      ::_FileDownloadResponse_default_instance_);
}
inline const ::FileDownloadResponse& ProtoBufMessage::filedownloadresponse() const {
  // @@protoc_insertion_point(field_get:ProtoBufMessage.fileDownloadResponse)
  return _internal_filedownloadresponse();
}
inline void ProtoBufMessage::unsafe_arena_set_allocated_filedownloadresponse(
    ::FileDownloadResponse* filedownloadresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filedownloadresponse_);
  }
  filedownloadresponse_ = filedownloadresponse;
  if (filedownloadresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoBufMessage.fileDownloadResponse)
}
inline ::FileDownloadResponse* ProtoBufMessage::release_filedownloadresponse() {
  
  ::FileDownloadResponse* temp = filedownloadresponse_;
  filedownloadresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FileDownloadResponse* ProtoBufMessage::unsafe_arena_release_filedownloadresponse() {
  // @@protoc_insertion_point(field_release:ProtoBufMessage.fileDownloadResponse)
  
  ::FileDownloadResponse* temp = filedownloadresponse_;
  filedownloadresponse_ = nullptr;
  return temp;
}
inline ::FileDownloadResponse* ProtoBufMessage::_internal_mutable_filedownloadresponse() {
  
  if (filedownloadresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::FileDownloadResponse>(GetArenaForAllocation());
    filedownloadresponse_ = p;
  }
  return filedownloadresponse_;
}
inline ::FileDownloadResponse* ProtoBufMessage::mutable_filedownloadresponse() {
  ::FileDownloadResponse* _msg = _internal_mutable_filedownloadresponse();
  // @@protoc_insertion_point(field_mutable:ProtoBufMessage.fileDownloadResponse)
  return _msg;
}
inline void ProtoBufMessage::set_allocated_filedownloadresponse(::FileDownloadResponse* filedownloadresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete filedownloadresponse_;
  }
  if (filedownloadresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FileDownloadResponse>::GetOwningArena(filedownloadresponse);
    if (message_arena != submessage_arena) {
      filedownloadresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filedownloadresponse, submessage_arena);
    }
    
  } else {
    
  }
  filedownloadresponse_ = filedownloadresponse;
  // @@protoc_insertion_point(field_set_allocated:ProtoBufMessage.fileDownloadResponse)
}

// -------------------------------------------------------------------

// Login

// bytes username = 1;
inline void Login::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& Login::username() const {
  // @@protoc_insertion_point(field_get:Login.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Login.username)
}
inline std::string* Login::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Login.username)
  return _s;
}
inline const std::string& Login::_internal_username() const {
  return username_.Get();
}
inline void Login::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Login::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Login::release_username() {
  // @@protoc_insertion_point(field_release:Login.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Login::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Login.username)
}

// bytes pwd = 2;
inline void Login::clear_pwd() {
  pwd_.ClearToEmpty();
}
inline const std::string& Login::pwd() const {
  // @@protoc_insertion_point(field_get:Login.pwd)
  return _internal_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login::set_pwd(ArgT0&& arg0, ArgT... args) {
 
 pwd_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Login.pwd)
}
inline std::string* Login::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:Login.pwd)
  return _s;
}
inline const std::string& Login::_internal_pwd() const {
  return pwd_.Get();
}
inline void Login::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Login::_internal_mutable_pwd() {
  
  return pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Login::release_pwd() {
  // @@protoc_insertion_point(field_release:Login.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Login::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pwd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Login.pwd)
}

// uint64 datetime = 3;
inline void Login::clear_datetime() {
  datetime_ = uint64_t{0u};
}
inline uint64_t Login::_internal_datetime() const {
  return datetime_;
}
inline uint64_t Login::datetime() const {
  // @@protoc_insertion_point(field_get:Login.datetime)
  return _internal_datetime();
}
inline void Login::_internal_set_datetime(uint64_t value) {
  
  datetime_ = value;
}
inline void Login::set_datetime(uint64_t value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:Login.datetime)
}

// -------------------------------------------------------------------

// LoginResponse

// int32 code = 1;
inline void LoginResponse::clear_code() {
  code_ = 0;
}
inline int32_t LoginResponse::_internal_code() const {
  return code_;
}
inline int32_t LoginResponse::code() const {
  // @@protoc_insertion_point(field_get:LoginResponse.code)
  return _internal_code();
}
inline void LoginResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void LoginResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:LoginResponse.code)
}

// bytes description = 2;
inline void LoginResponse::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& LoginResponse::description() const {
  // @@protoc_insertion_point(field_get:LoginResponse.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginResponse::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginResponse.description)
}
inline std::string* LoginResponse::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:LoginResponse.description)
  return _s;
}
inline const std::string& LoginResponse::_internal_description() const {
  return description_.Get();
}
inline void LoginResponse::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginResponse::release_description() {
  // @@protoc_insertion_point(field_release:LoginResponse.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginResponse::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginResponse.description)
}

// uint64 uid = 3;
inline void LoginResponse::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t LoginResponse::_internal_uid() const {
  return uid_;
}
inline uint64_t LoginResponse::uid() const {
  // @@protoc_insertion_point(field_get:LoginResponse.uid)
  return _internal_uid();
}
inline void LoginResponse::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void LoginResponse::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:LoginResponse.uid)
}

// -------------------------------------------------------------------

// FileUploadRequest

// uint64 uid = 1;
inline void FileUploadRequest::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t FileUploadRequest::_internal_uid() const {
  return uid_;
}
inline uint64_t FileUploadRequest::uid() const {
  // @@protoc_insertion_point(field_get:FileUploadRequest.uid)
  return _internal_uid();
}
inline void FileUploadRequest::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void FileUploadRequest::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:FileUploadRequest.uid)
}

// bytes originpath = 2;
inline void FileUploadRequest::clear_originpath() {
  originpath_.ClearToEmpty();
}
inline const std::string& FileUploadRequest::originpath() const {
  // @@protoc_insertion_point(field_get:FileUploadRequest.originpath)
  return _internal_originpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadRequest::set_originpath(ArgT0&& arg0, ArgT... args) {
 
 originpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadRequest.originpath)
}
inline std::string* FileUploadRequest::mutable_originpath() {
  std::string* _s = _internal_mutable_originpath();
  // @@protoc_insertion_point(field_mutable:FileUploadRequest.originpath)
  return _s;
}
inline const std::string& FileUploadRequest::_internal_originpath() const {
  return originpath_.Get();
}
inline void FileUploadRequest::_internal_set_originpath(const std::string& value) {
  
  originpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadRequest::_internal_mutable_originpath() {
  
  return originpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadRequest::release_originpath() {
  // @@protoc_insertion_point(field_release:FileUploadRequest.originpath)
  return originpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadRequest::set_allocated_originpath(std::string* originpath) {
  if (originpath != nullptr) {
    
  } else {
    
  }
  originpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (originpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    originpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadRequest.originpath)
}

// bytes filename = 3;
inline void FileUploadRequest::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& FileUploadRequest::filename() const {
  // @@protoc_insertion_point(field_get:FileUploadRequest.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadRequest::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadRequest.filename)
}
inline std::string* FileUploadRequest::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:FileUploadRequest.filename)
  return _s;
}
inline const std::string& FileUploadRequest::_internal_filename() const {
  return filename_.Get();
}
inline void FileUploadRequest::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadRequest::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadRequest::release_filename() {
  // @@protoc_insertion_point(field_release:FileUploadRequest.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadRequest.filename)
}

// bytes targetpath = 4;
inline void FileUploadRequest::clear_targetpath() {
  targetpath_.ClearToEmpty();
}
inline const std::string& FileUploadRequest::targetpath() const {
  // @@protoc_insertion_point(field_get:FileUploadRequest.targetpath)
  return _internal_targetpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadRequest::set_targetpath(ArgT0&& arg0, ArgT... args) {
 
 targetpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadRequest.targetpath)
}
inline std::string* FileUploadRequest::mutable_targetpath() {
  std::string* _s = _internal_mutable_targetpath();
  // @@protoc_insertion_point(field_mutable:FileUploadRequest.targetpath)
  return _s;
}
inline const std::string& FileUploadRequest::_internal_targetpath() const {
  return targetpath_.Get();
}
inline void FileUploadRequest::_internal_set_targetpath(const std::string& value) {
  
  targetpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadRequest::_internal_mutable_targetpath() {
  
  return targetpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadRequest::release_targetpath() {
  // @@protoc_insertion_point(field_release:FileUploadRequest.targetpath)
  return targetpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadRequest::set_allocated_targetpath(std::string* targetpath) {
  if (targetpath != nullptr) {
    
  } else {
    
  }
  targetpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (targetpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    targetpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadRequest.targetpath)
}

// uint64 filesize = 5;
inline void FileUploadRequest::clear_filesize() {
  filesize_ = uint64_t{0u};
}
inline uint64_t FileUploadRequest::_internal_filesize() const {
  return filesize_;
}
inline uint64_t FileUploadRequest::filesize() const {
  // @@protoc_insertion_point(field_get:FileUploadRequest.filesize)
  return _internal_filesize();
}
inline void FileUploadRequest::_internal_set_filesize(uint64_t value) {
  
  filesize_ = value;
}
inline void FileUploadRequest::set_filesize(uint64_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:FileUploadRequest.filesize)
}

// -------------------------------------------------------------------

// FileUploadRequestResponse

// uint64 uid = 1;
inline void FileUploadRequestResponse::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t FileUploadRequestResponse::_internal_uid() const {
  return uid_;
}
inline uint64_t FileUploadRequestResponse::uid() const {
  // @@protoc_insertion_point(field_get:FileUploadRequestResponse.uid)
  return _internal_uid();
}
inline void FileUploadRequestResponse::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void FileUploadRequestResponse::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:FileUploadRequestResponse.uid)
}

// int32 code = 2;
inline void FileUploadRequestResponse::clear_code() {
  code_ = 0;
}
inline int32_t FileUploadRequestResponse::_internal_code() const {
  return code_;
}
inline int32_t FileUploadRequestResponse::code() const {
  // @@protoc_insertion_point(field_get:FileUploadRequestResponse.code)
  return _internal_code();
}
inline void FileUploadRequestResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void FileUploadRequestResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:FileUploadRequestResponse.code)
}

// bytes description = 3;
inline void FileUploadRequestResponse::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& FileUploadRequestResponse::description() const {
  // @@protoc_insertion_point(field_get:FileUploadRequestResponse.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadRequestResponse::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadRequestResponse.description)
}
inline std::string* FileUploadRequestResponse::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:FileUploadRequestResponse.description)
  return _s;
}
inline const std::string& FileUploadRequestResponse::_internal_description() const {
  return description_.Get();
}
inline void FileUploadRequestResponse::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadRequestResponse::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadRequestResponse::release_description() {
  // @@protoc_insertion_point(field_release:FileUploadRequestResponse.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadRequestResponse::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadRequestResponse.description)
}

// bytes originpath = 4;
inline void FileUploadRequestResponse::clear_originpath() {
  originpath_.ClearToEmpty();
}
inline const std::string& FileUploadRequestResponse::originpath() const {
  // @@protoc_insertion_point(field_get:FileUploadRequestResponse.originpath)
  return _internal_originpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadRequestResponse::set_originpath(ArgT0&& arg0, ArgT... args) {
 
 originpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadRequestResponse.originpath)
}
inline std::string* FileUploadRequestResponse::mutable_originpath() {
  std::string* _s = _internal_mutable_originpath();
  // @@protoc_insertion_point(field_mutable:FileUploadRequestResponse.originpath)
  return _s;
}
inline const std::string& FileUploadRequestResponse::_internal_originpath() const {
  return originpath_.Get();
}
inline void FileUploadRequestResponse::_internal_set_originpath(const std::string& value) {
  
  originpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadRequestResponse::_internal_mutable_originpath() {
  
  return originpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadRequestResponse::release_originpath() {
  // @@protoc_insertion_point(field_release:FileUploadRequestResponse.originpath)
  return originpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadRequestResponse::set_allocated_originpath(std::string* originpath) {
  if (originpath != nullptr) {
    
  } else {
    
  }
  originpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (originpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    originpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadRequestResponse.originpath)
}

// bytes targetpath = 5;
inline void FileUploadRequestResponse::clear_targetpath() {
  targetpath_.ClearToEmpty();
}
inline const std::string& FileUploadRequestResponse::targetpath() const {
  // @@protoc_insertion_point(field_get:FileUploadRequestResponse.targetpath)
  return _internal_targetpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadRequestResponse::set_targetpath(ArgT0&& arg0, ArgT... args) {
 
 targetpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadRequestResponse.targetpath)
}
inline std::string* FileUploadRequestResponse::mutable_targetpath() {
  std::string* _s = _internal_mutable_targetpath();
  // @@protoc_insertion_point(field_mutable:FileUploadRequestResponse.targetpath)
  return _s;
}
inline const std::string& FileUploadRequestResponse::_internal_targetpath() const {
  return targetpath_.Get();
}
inline void FileUploadRequestResponse::_internal_set_targetpath(const std::string& value) {
  
  targetpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadRequestResponse::_internal_mutable_targetpath() {
  
  return targetpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadRequestResponse::release_targetpath() {
  // @@protoc_insertion_point(field_release:FileUploadRequestResponse.targetpath)
  return targetpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadRequestResponse::set_allocated_targetpath(std::string* targetpath) {
  if (targetpath != nullptr) {
    
  } else {
    
  }
  targetpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (targetpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    targetpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadRequestResponse.targetpath)
}

// -------------------------------------------------------------------

// FileUpload

// uint64 uid = 1;
inline void FileUpload::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t FileUpload::_internal_uid() const {
  return uid_;
}
inline uint64_t FileUpload::uid() const {
  // @@protoc_insertion_point(field_get:FileUpload.uid)
  return _internal_uid();
}
inline void FileUpload::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void FileUpload::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:FileUpload.uid)
}

// bytes filename = 2;
inline void FileUpload::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& FileUpload::filename() const {
  // @@protoc_insertion_point(field_get:FileUpload.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUpload::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUpload.filename)
}
inline std::string* FileUpload::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:FileUpload.filename)
  return _s;
}
inline const std::string& FileUpload::_internal_filename() const {
  return filename_.Get();
}
inline void FileUpload::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUpload::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUpload::release_filename() {
  // @@protoc_insertion_point(field_release:FileUpload.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUpload::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUpload.filename)
}

// uint64 index = 3;
inline void FileUpload::clear_index() {
  index_ = uint64_t{0u};
}
inline uint64_t FileUpload::_internal_index() const {
  return index_;
}
inline uint64_t FileUpload::index() const {
  // @@protoc_insertion_point(field_get:FileUpload.index)
  return _internal_index();
}
inline void FileUpload::_internal_set_index(uint64_t value) {
  
  index_ = value;
}
inline void FileUpload::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:FileUpload.index)
}

// bytes data = 4;
inline void FileUpload::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& FileUpload::data() const {
  // @@protoc_insertion_point(field_get:FileUpload.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUpload::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUpload.data)
}
inline std::string* FileUpload::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:FileUpload.data)
  return _s;
}
inline const std::string& FileUpload::_internal_data() const {
  return data_.Get();
}
inline void FileUpload::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUpload::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUpload::release_data() {
  // @@protoc_insertion_point(field_release:FileUpload.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUpload::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUpload.data)
}

// uint64 size = 5;
inline void FileUpload::clear_size() {
  size_ = uint64_t{0u};
}
inline uint64_t FileUpload::_internal_size() const {
  return size_;
}
inline uint64_t FileUpload::size() const {
  // @@protoc_insertion_point(field_get:FileUpload.size)
  return _internal_size();
}
inline void FileUpload::_internal_set_size(uint64_t value) {
  
  size_ = value;
}
inline void FileUpload::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:FileUpload.size)
}

// bytes targetpath = 6;
inline void FileUpload::clear_targetpath() {
  targetpath_.ClearToEmpty();
}
inline const std::string& FileUpload::targetpath() const {
  // @@protoc_insertion_point(field_get:FileUpload.targetpath)
  return _internal_targetpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUpload::set_targetpath(ArgT0&& arg0, ArgT... args) {
 
 targetpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUpload.targetpath)
}
inline std::string* FileUpload::mutable_targetpath() {
  std::string* _s = _internal_mutable_targetpath();
  // @@protoc_insertion_point(field_mutable:FileUpload.targetpath)
  return _s;
}
inline const std::string& FileUpload::_internal_targetpath() const {
  return targetpath_.Get();
}
inline void FileUpload::_internal_set_targetpath(const std::string& value) {
  
  targetpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUpload::_internal_mutable_targetpath() {
  
  return targetpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUpload::release_targetpath() {
  // @@protoc_insertion_point(field_release:FileUpload.targetpath)
  return targetpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUpload::set_allocated_targetpath(std::string* targetpath) {
  if (targetpath != nullptr) {
    
  } else {
    
  }
  targetpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (targetpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    targetpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUpload.targetpath)
}

// bytes originpath = 7;
inline void FileUpload::clear_originpath() {
  originpath_.ClearToEmpty();
}
inline const std::string& FileUpload::originpath() const {
  // @@protoc_insertion_point(field_get:FileUpload.originpath)
  return _internal_originpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUpload::set_originpath(ArgT0&& arg0, ArgT... args) {
 
 originpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUpload.originpath)
}
inline std::string* FileUpload::mutable_originpath() {
  std::string* _s = _internal_mutable_originpath();
  // @@protoc_insertion_point(field_mutable:FileUpload.originpath)
  return _s;
}
inline const std::string& FileUpload::_internal_originpath() const {
  return originpath_.Get();
}
inline void FileUpload::_internal_set_originpath(const std::string& value) {
  
  originpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUpload::_internal_mutable_originpath() {
  
  return originpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUpload::release_originpath() {
  // @@protoc_insertion_point(field_release:FileUpload.originpath)
  return originpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUpload::set_allocated_originpath(std::string* originpath) {
  if (originpath != nullptr) {
    
  } else {
    
  }
  originpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (originpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    originpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUpload.originpath)
}

// -------------------------------------------------------------------

// FileUploadResponse

// uint64 uid = 1;
inline void FileUploadResponse::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t FileUploadResponse::_internal_uid() const {
  return uid_;
}
inline uint64_t FileUploadResponse::uid() const {
  // @@protoc_insertion_point(field_get:FileUploadResponse.uid)
  return _internal_uid();
}
inline void FileUploadResponse::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void FileUploadResponse::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:FileUploadResponse.uid)
}

// bytes filename = 2;
inline void FileUploadResponse::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& FileUploadResponse::filename() const {
  // @@protoc_insertion_point(field_get:FileUploadResponse.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadResponse::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadResponse.filename)
}
inline std::string* FileUploadResponse::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:FileUploadResponse.filename)
  return _s;
}
inline const std::string& FileUploadResponse::_internal_filename() const {
  return filename_.Get();
}
inline void FileUploadResponse::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadResponse::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadResponse::release_filename() {
  // @@protoc_insertion_point(field_release:FileUploadResponse.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadResponse::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadResponse.filename)
}

// uint64 size = 3;
inline void FileUploadResponse::clear_size() {
  size_ = uint64_t{0u};
}
inline uint64_t FileUploadResponse::_internal_size() const {
  return size_;
}
inline uint64_t FileUploadResponse::size() const {
  // @@protoc_insertion_point(field_get:FileUploadResponse.size)
  return _internal_size();
}
inline void FileUploadResponse::_internal_set_size(uint64_t value) {
  
  size_ = value;
}
inline void FileUploadResponse::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:FileUploadResponse.size)
}

// int32 code = 4;
inline void FileUploadResponse::clear_code() {
  code_ = 0;
}
inline int32_t FileUploadResponse::_internal_code() const {
  return code_;
}
inline int32_t FileUploadResponse::code() const {
  // @@protoc_insertion_point(field_get:FileUploadResponse.code)
  return _internal_code();
}
inline void FileUploadResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void FileUploadResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:FileUploadResponse.code)
}

// bytes description = 5;
inline void FileUploadResponse::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& FileUploadResponse::description() const {
  // @@protoc_insertion_point(field_get:FileUploadResponse.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadResponse::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadResponse.description)
}
inline std::string* FileUploadResponse::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:FileUploadResponse.description)
  return _s;
}
inline const std::string& FileUploadResponse::_internal_description() const {
  return description_.Get();
}
inline void FileUploadResponse::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadResponse::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadResponse::release_description() {
  // @@protoc_insertion_point(field_release:FileUploadResponse.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadResponse::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadResponse.description)
}

// bytes targetpath = 6;
inline void FileUploadResponse::clear_targetpath() {
  targetpath_.ClearToEmpty();
}
inline const std::string& FileUploadResponse::targetpath() const {
  // @@protoc_insertion_point(field_get:FileUploadResponse.targetpath)
  return _internal_targetpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadResponse::set_targetpath(ArgT0&& arg0, ArgT... args) {
 
 targetpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadResponse.targetpath)
}
inline std::string* FileUploadResponse::mutable_targetpath() {
  std::string* _s = _internal_mutable_targetpath();
  // @@protoc_insertion_point(field_mutable:FileUploadResponse.targetpath)
  return _s;
}
inline const std::string& FileUploadResponse::_internal_targetpath() const {
  return targetpath_.Get();
}
inline void FileUploadResponse::_internal_set_targetpath(const std::string& value) {
  
  targetpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadResponse::_internal_mutable_targetpath() {
  
  return targetpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadResponse::release_targetpath() {
  // @@protoc_insertion_point(field_release:FileUploadResponse.targetpath)
  return targetpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadResponse::set_allocated_targetpath(std::string* targetpath) {
  if (targetpath != nullptr) {
    
  } else {
    
  }
  targetpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (targetpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    targetpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadResponse.targetpath)
}

// bytes originpath = 7;
inline void FileUploadResponse::clear_originpath() {
  originpath_.ClearToEmpty();
}
inline const std::string& FileUploadResponse::originpath() const {
  // @@protoc_insertion_point(field_get:FileUploadResponse.originpath)
  return _internal_originpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadResponse::set_originpath(ArgT0&& arg0, ArgT... args) {
 
 originpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadResponse.originpath)
}
inline std::string* FileUploadResponse::mutable_originpath() {
  std::string* _s = _internal_mutable_originpath();
  // @@protoc_insertion_point(field_mutable:FileUploadResponse.originpath)
  return _s;
}
inline const std::string& FileUploadResponse::_internal_originpath() const {
  return originpath_.Get();
}
inline void FileUploadResponse::_internal_set_originpath(const std::string& value) {
  
  originpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadResponse::_internal_mutable_originpath() {
  
  return originpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadResponse::release_originpath() {
  // @@protoc_insertion_point(field_release:FileUploadResponse.originpath)
  return originpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadResponse::set_allocated_originpath(std::string* originpath) {
  if (originpath != nullptr) {
    
  } else {
    
  }
  originpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (originpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    originpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadResponse.originpath)
}

// -------------------------------------------------------------------

// FileUploadCheck

// uint64 uid = 1;
inline void FileUploadCheck::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t FileUploadCheck::_internal_uid() const {
  return uid_;
}
inline uint64_t FileUploadCheck::uid() const {
  // @@protoc_insertion_point(field_get:FileUploadCheck.uid)
  return _internal_uid();
}
inline void FileUploadCheck::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void FileUploadCheck::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:FileUploadCheck.uid)
}

// bytes filename = 2;
inline void FileUploadCheck::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& FileUploadCheck::filename() const {
  // @@protoc_insertion_point(field_get:FileUploadCheck.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadCheck::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadCheck.filename)
}
inline std::string* FileUploadCheck::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:FileUploadCheck.filename)
  return _s;
}
inline const std::string& FileUploadCheck::_internal_filename() const {
  return filename_.Get();
}
inline void FileUploadCheck::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadCheck::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadCheck::release_filename() {
  // @@protoc_insertion_point(field_release:FileUploadCheck.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadCheck::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadCheck.filename)
}

// bytes targetpath = 3;
inline void FileUploadCheck::clear_targetpath() {
  targetpath_.ClearToEmpty();
}
inline const std::string& FileUploadCheck::targetpath() const {
  // @@protoc_insertion_point(field_get:FileUploadCheck.targetpath)
  return _internal_targetpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadCheck::set_targetpath(ArgT0&& arg0, ArgT... args) {
 
 targetpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadCheck.targetpath)
}
inline std::string* FileUploadCheck::mutable_targetpath() {
  std::string* _s = _internal_mutable_targetpath();
  // @@protoc_insertion_point(field_mutable:FileUploadCheck.targetpath)
  return _s;
}
inline const std::string& FileUploadCheck::_internal_targetpath() const {
  return targetpath_.Get();
}
inline void FileUploadCheck::_internal_set_targetpath(const std::string& value) {
  
  targetpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadCheck::_internal_mutable_targetpath() {
  
  return targetpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadCheck::release_targetpath() {
  // @@protoc_insertion_point(field_release:FileUploadCheck.targetpath)
  return targetpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadCheck::set_allocated_targetpath(std::string* targetpath) {
  if (targetpath != nullptr) {
    
  } else {
    
  }
  targetpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (targetpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    targetpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadCheck.targetpath)
}

// bytes md5 = 4;
inline void FileUploadCheck::clear_md5() {
  md5_.ClearToEmpty();
}
inline const std::string& FileUploadCheck::md5() const {
  // @@protoc_insertion_point(field_get:FileUploadCheck.md5)
  return _internal_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadCheck::set_md5(ArgT0&& arg0, ArgT... args) {
 
 md5_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadCheck.md5)
}
inline std::string* FileUploadCheck::mutable_md5() {
  std::string* _s = _internal_mutable_md5();
  // @@protoc_insertion_point(field_mutable:FileUploadCheck.md5)
  return _s;
}
inline const std::string& FileUploadCheck::_internal_md5() const {
  return md5_.Get();
}
inline void FileUploadCheck::_internal_set_md5(const std::string& value) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadCheck::_internal_mutable_md5() {
  
  return md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadCheck::release_md5() {
  // @@protoc_insertion_point(field_release:FileUploadCheck.md5)
  return md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadCheck::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (md5_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadCheck.md5)
}

// -------------------------------------------------------------------

// FileUploadCheckResponse

// uint64 uid = 1;
inline void FileUploadCheckResponse::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t FileUploadCheckResponse::_internal_uid() const {
  return uid_;
}
inline uint64_t FileUploadCheckResponse::uid() const {
  // @@protoc_insertion_point(field_get:FileUploadCheckResponse.uid)
  return _internal_uid();
}
inline void FileUploadCheckResponse::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void FileUploadCheckResponse::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:FileUploadCheckResponse.uid)
}

// bytes targetpath = 2;
inline void FileUploadCheckResponse::clear_targetpath() {
  targetpath_.ClearToEmpty();
}
inline const std::string& FileUploadCheckResponse::targetpath() const {
  // @@protoc_insertion_point(field_get:FileUploadCheckResponse.targetpath)
  return _internal_targetpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadCheckResponse::set_targetpath(ArgT0&& arg0, ArgT... args) {
 
 targetpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadCheckResponse.targetpath)
}
inline std::string* FileUploadCheckResponse::mutable_targetpath() {
  std::string* _s = _internal_mutable_targetpath();
  // @@protoc_insertion_point(field_mutable:FileUploadCheckResponse.targetpath)
  return _s;
}
inline const std::string& FileUploadCheckResponse::_internal_targetpath() const {
  return targetpath_.Get();
}
inline void FileUploadCheckResponse::_internal_set_targetpath(const std::string& value) {
  
  targetpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadCheckResponse::_internal_mutable_targetpath() {
  
  return targetpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadCheckResponse::release_targetpath() {
  // @@protoc_insertion_point(field_release:FileUploadCheckResponse.targetpath)
  return targetpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadCheckResponse::set_allocated_targetpath(std::string* targetpath) {
  if (targetpath != nullptr) {
    
  } else {
    
  }
  targetpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (targetpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    targetpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadCheckResponse.targetpath)
}

// bytes filename = 3;
inline void FileUploadCheckResponse::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& FileUploadCheckResponse::filename() const {
  // @@protoc_insertion_point(field_get:FileUploadCheckResponse.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadCheckResponse::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadCheckResponse.filename)
}
inline std::string* FileUploadCheckResponse::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:FileUploadCheckResponse.filename)
  return _s;
}
inline const std::string& FileUploadCheckResponse::_internal_filename() const {
  return filename_.Get();
}
inline void FileUploadCheckResponse::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadCheckResponse::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadCheckResponse::release_filename() {
  // @@protoc_insertion_point(field_release:FileUploadCheckResponse.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadCheckResponse::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadCheckResponse.filename)
}

// int32 code = 4;
inline void FileUploadCheckResponse::clear_code() {
  code_ = 0;
}
inline int32_t FileUploadCheckResponse::_internal_code() const {
  return code_;
}
inline int32_t FileUploadCheckResponse::code() const {
  // @@protoc_insertion_point(field_get:FileUploadCheckResponse.code)
  return _internal_code();
}
inline void FileUploadCheckResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void FileUploadCheckResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:FileUploadCheckResponse.code)
}

// bytes description = 5;
inline void FileUploadCheckResponse::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& FileUploadCheckResponse::description() const {
  // @@protoc_insertion_point(field_get:FileUploadCheckResponse.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadCheckResponse::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileUploadCheckResponse.description)
}
inline std::string* FileUploadCheckResponse::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:FileUploadCheckResponse.description)
  return _s;
}
inline const std::string& FileUploadCheckResponse::_internal_description() const {
  return description_.Get();
}
inline void FileUploadCheckResponse::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadCheckResponse::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadCheckResponse::release_description() {
  // @@protoc_insertion_point(field_release:FileUploadCheckResponse.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadCheckResponse::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileUploadCheckResponse.description)
}

// -------------------------------------------------------------------

// FileDownloadRequest

// uint64 uid = 1;
inline void FileDownloadRequest::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t FileDownloadRequest::_internal_uid() const {
  return uid_;
}
inline uint64_t FileDownloadRequest::uid() const {
  // @@protoc_insertion_point(field_get:FileDownloadRequest.uid)
  return _internal_uid();
}
inline void FileDownloadRequest::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void FileDownloadRequest::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:FileDownloadRequest.uid)
}

// bytes filename = 2;
inline void FileDownloadRequest::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& FileDownloadRequest::filename() const {
  // @@protoc_insertion_point(field_get:FileDownloadRequest.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadRequest::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileDownloadRequest.filename)
}
inline std::string* FileDownloadRequest::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:FileDownloadRequest.filename)
  return _s;
}
inline const std::string& FileDownloadRequest::_internal_filename() const {
  return filename_.Get();
}
inline void FileDownloadRequest::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadRequest::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadRequest::release_filename() {
  // @@protoc_insertion_point(field_release:FileDownloadRequest.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileDownloadRequest.filename)
}

// bytes targetpath = 3;
inline void FileDownloadRequest::clear_targetpath() {
  targetpath_.ClearToEmpty();
}
inline const std::string& FileDownloadRequest::targetpath() const {
  // @@protoc_insertion_point(field_get:FileDownloadRequest.targetpath)
  return _internal_targetpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadRequest::set_targetpath(ArgT0&& arg0, ArgT... args) {
 
 targetpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileDownloadRequest.targetpath)
}
inline std::string* FileDownloadRequest::mutable_targetpath() {
  std::string* _s = _internal_mutable_targetpath();
  // @@protoc_insertion_point(field_mutable:FileDownloadRequest.targetpath)
  return _s;
}
inline const std::string& FileDownloadRequest::_internal_targetpath() const {
  return targetpath_.Get();
}
inline void FileDownloadRequest::_internal_set_targetpath(const std::string& value) {
  
  targetpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadRequest::_internal_mutable_targetpath() {
  
  return targetpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadRequest::release_targetpath() {
  // @@protoc_insertion_point(field_release:FileDownloadRequest.targetpath)
  return targetpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadRequest::set_allocated_targetpath(std::string* targetpath) {
  if (targetpath != nullptr) {
    
  } else {
    
  }
  targetpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (targetpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    targetpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileDownloadRequest.targetpath)
}

// -------------------------------------------------------------------

// FileDownloadRequestResponse

// uint64 uid = 1;
inline void FileDownloadRequestResponse::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t FileDownloadRequestResponse::_internal_uid() const {
  return uid_;
}
inline uint64_t FileDownloadRequestResponse::uid() const {
  // @@protoc_insertion_point(field_get:FileDownloadRequestResponse.uid)
  return _internal_uid();
}
inline void FileDownloadRequestResponse::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void FileDownloadRequestResponse::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:FileDownloadRequestResponse.uid)
}

// int32 code = 2;
inline void FileDownloadRequestResponse::clear_code() {
  code_ = 0;
}
inline int32_t FileDownloadRequestResponse::_internal_code() const {
  return code_;
}
inline int32_t FileDownloadRequestResponse::code() const {
  // @@protoc_insertion_point(field_get:FileDownloadRequestResponse.code)
  return _internal_code();
}
inline void FileDownloadRequestResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void FileDownloadRequestResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:FileDownloadRequestResponse.code)
}

// bytes description = 3;
inline void FileDownloadRequestResponse::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& FileDownloadRequestResponse::description() const {
  // @@protoc_insertion_point(field_get:FileDownloadRequestResponse.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadRequestResponse::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileDownloadRequestResponse.description)
}
inline std::string* FileDownloadRequestResponse::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:FileDownloadRequestResponse.description)
  return _s;
}
inline const std::string& FileDownloadRequestResponse::_internal_description() const {
  return description_.Get();
}
inline void FileDownloadRequestResponse::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadRequestResponse::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadRequestResponse::release_description() {
  // @@protoc_insertion_point(field_release:FileDownloadRequestResponse.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadRequestResponse::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileDownloadRequestResponse.description)
}

// bytes filename = 4;
inline void FileDownloadRequestResponse::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& FileDownloadRequestResponse::filename() const {
  // @@protoc_insertion_point(field_get:FileDownloadRequestResponse.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadRequestResponse::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileDownloadRequestResponse.filename)
}
inline std::string* FileDownloadRequestResponse::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:FileDownloadRequestResponse.filename)
  return _s;
}
inline const std::string& FileDownloadRequestResponse::_internal_filename() const {
  return filename_.Get();
}
inline void FileDownloadRequestResponse::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadRequestResponse::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadRequestResponse::release_filename() {
  // @@protoc_insertion_point(field_release:FileDownloadRequestResponse.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadRequestResponse::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileDownloadRequestResponse.filename)
}

// uint64 size = 5;
inline void FileDownloadRequestResponse::clear_size() {
  size_ = uint64_t{0u};
}
inline uint64_t FileDownloadRequestResponse::_internal_size() const {
  return size_;
}
inline uint64_t FileDownloadRequestResponse::size() const {
  // @@protoc_insertion_point(field_get:FileDownloadRequestResponse.size)
  return _internal_size();
}
inline void FileDownloadRequestResponse::_internal_set_size(uint64_t value) {
  
  size_ = value;
}
inline void FileDownloadRequestResponse::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:FileDownloadRequestResponse.size)
}

// bytes targetpath = 6;
inline void FileDownloadRequestResponse::clear_targetpath() {
  targetpath_.ClearToEmpty();
}
inline const std::string& FileDownloadRequestResponse::targetpath() const {
  // @@protoc_insertion_point(field_get:FileDownloadRequestResponse.targetpath)
  return _internal_targetpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadRequestResponse::set_targetpath(ArgT0&& arg0, ArgT... args) {
 
 targetpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileDownloadRequestResponse.targetpath)
}
inline std::string* FileDownloadRequestResponse::mutable_targetpath() {
  std::string* _s = _internal_mutable_targetpath();
  // @@protoc_insertion_point(field_mutable:FileDownloadRequestResponse.targetpath)
  return _s;
}
inline const std::string& FileDownloadRequestResponse::_internal_targetpath() const {
  return targetpath_.Get();
}
inline void FileDownloadRequestResponse::_internal_set_targetpath(const std::string& value) {
  
  targetpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadRequestResponse::_internal_mutable_targetpath() {
  
  return targetpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadRequestResponse::release_targetpath() {
  // @@protoc_insertion_point(field_release:FileDownloadRequestResponse.targetpath)
  return targetpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadRequestResponse::set_allocated_targetpath(std::string* targetpath) {
  if (targetpath != nullptr) {
    
  } else {
    
  }
  targetpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (targetpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    targetpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileDownloadRequestResponse.targetpath)
}

// -------------------------------------------------------------------

// FileDownload

// uint64 uid = 1;
inline void FileDownload::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t FileDownload::_internal_uid() const {
  return uid_;
}
inline uint64_t FileDownload::uid() const {
  // @@protoc_insertion_point(field_get:FileDownload.uid)
  return _internal_uid();
}
inline void FileDownload::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void FileDownload::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:FileDownload.uid)
}

// bytes filename = 2;
inline void FileDownload::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& FileDownload::filename() const {
  // @@protoc_insertion_point(field_get:FileDownload.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownload::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileDownload.filename)
}
inline std::string* FileDownload::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:FileDownload.filename)
  return _s;
}
inline const std::string& FileDownload::_internal_filename() const {
  return filename_.Get();
}
inline void FileDownload::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownload::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownload::release_filename() {
  // @@protoc_insertion_point(field_release:FileDownload.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownload::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileDownload.filename)
}

// bytes targetpath = 3;
inline void FileDownload::clear_targetpath() {
  targetpath_.ClearToEmpty();
}
inline const std::string& FileDownload::targetpath() const {
  // @@protoc_insertion_point(field_get:FileDownload.targetpath)
  return _internal_targetpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownload::set_targetpath(ArgT0&& arg0, ArgT... args) {
 
 targetpath_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileDownload.targetpath)
}
inline std::string* FileDownload::mutable_targetpath() {
  std::string* _s = _internal_mutable_targetpath();
  // @@protoc_insertion_point(field_mutable:FileDownload.targetpath)
  return _s;
}
inline const std::string& FileDownload::_internal_targetpath() const {
  return targetpath_.Get();
}
inline void FileDownload::_internal_set_targetpath(const std::string& value) {
  
  targetpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownload::_internal_mutable_targetpath() {
  
  return targetpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownload::release_targetpath() {
  // @@protoc_insertion_point(field_release:FileDownload.targetpath)
  return targetpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownload::set_allocated_targetpath(std::string* targetpath) {
  if (targetpath != nullptr) {
    
  } else {
    
  }
  targetpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (targetpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    targetpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileDownload.targetpath)
}

// -------------------------------------------------------------------

// FileDownloadResponse

// uint64 uid = 1;
inline void FileDownloadResponse::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t FileDownloadResponse::_internal_uid() const {
  return uid_;
}
inline uint64_t FileDownloadResponse::uid() const {
  // @@protoc_insertion_point(field_get:FileDownloadResponse.uid)
  return _internal_uid();
}
inline void FileDownloadResponse::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void FileDownloadResponse::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:FileDownloadResponse.uid)
}

// int32 code = 2;
inline void FileDownloadResponse::clear_code() {
  code_ = 0;
}
inline int32_t FileDownloadResponse::_internal_code() const {
  return code_;
}
inline int32_t FileDownloadResponse::code() const {
  // @@protoc_insertion_point(field_get:FileDownloadResponse.code)
  return _internal_code();
}
inline void FileDownloadResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void FileDownloadResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:FileDownloadResponse.code)
}

// bytes description = 3;
inline void FileDownloadResponse::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& FileDownloadResponse::description() const {
  // @@protoc_insertion_point(field_get:FileDownloadResponse.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadResponse::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileDownloadResponse.description)
}
inline std::string* FileDownloadResponse::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:FileDownloadResponse.description)
  return _s;
}
inline const std::string& FileDownloadResponse::_internal_description() const {
  return description_.Get();
}
inline void FileDownloadResponse::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadResponse::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadResponse::release_description() {
  // @@protoc_insertion_point(field_release:FileDownloadResponse.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadResponse::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileDownloadResponse.description)
}

// bytes filename = 4;
inline void FileDownloadResponse::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& FileDownloadResponse::filename() const {
  // @@protoc_insertion_point(field_get:FileDownloadResponse.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadResponse::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileDownloadResponse.filename)
}
inline std::string* FileDownloadResponse::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:FileDownloadResponse.filename)
  return _s;
}
inline const std::string& FileDownloadResponse::_internal_filename() const {
  return filename_.Get();
}
inline void FileDownloadResponse::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadResponse::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadResponse::release_filename() {
  // @@protoc_insertion_point(field_release:FileDownloadResponse.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadResponse::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileDownloadResponse.filename)
}

// uint64 index = 5;
inline void FileDownloadResponse::clear_index() {
  index_ = uint64_t{0u};
}
inline uint64_t FileDownloadResponse::_internal_index() const {
  return index_;
}
inline uint64_t FileDownloadResponse::index() const {
  // @@protoc_insertion_point(field_get:FileDownloadResponse.index)
  return _internal_index();
}
inline void FileDownloadResponse::_internal_set_index(uint64_t value) {
  
  index_ = value;
}
inline void FileDownloadResponse::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:FileDownloadResponse.index)
}

// bytes data = 6;
inline void FileDownloadResponse::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& FileDownloadResponse::data() const {
  // @@protoc_insertion_point(field_get:FileDownloadResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileDownloadResponse.data)
}
inline std::string* FileDownloadResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:FileDownloadResponse.data)
  return _s;
}
inline const std::string& FileDownloadResponse::_internal_data() const {
  return data_.Get();
}
inline void FileDownloadResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadResponse::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadResponse::release_data() {
  // @@protoc_insertion_point(field_release:FileDownloadResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileDownloadResponse.data)
}

// uint64 size = 7;
inline void FileDownloadResponse::clear_size() {
  size_ = uint64_t{0u};
}
inline uint64_t FileDownloadResponse::_internal_size() const {
  return size_;
}
inline uint64_t FileDownloadResponse::size() const {
  // @@protoc_insertion_point(field_get:FileDownloadResponse.size)
  return _internal_size();
}
inline void FileDownloadResponse::_internal_set_size(uint64_t value) {
  
  size_ = value;
}
inline void FileDownloadResponse::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:FileDownloadResponse.size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::COMMAND> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::COMMAND>() {
  return ::COMMAND_descriptor();
}
template <> struct is_proto_enum< ::STATUSCODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::STATUSCODE>() {
  return ::STATUSCODE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Sooler_2eproto
